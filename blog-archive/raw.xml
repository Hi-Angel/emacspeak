<?xml version='1.0' encoding='UTF-8'?><?xml-stylesheet href="http://www.blogger.com/styles/atom.css" type="text/css"?>
<feed xmlns='http://www.w3.org/2005/Atom' xmlns:openSearch='http://a9.com/-/spec/opensearchrss/1.0/' xmlns:blogger='http://schemas.google.com/blogger/2008' xmlns:georss='http://www.georss.org/georss' xmlns:gd="http://schemas.google.com/g/2005" xmlns:thr='http://purl.org/syndication/thread/1.0'>
  <id>tag:blogger.com,1999:blog-20280042</id><updated>
    2022-04-09T14:39:50.169-07:00
  </updated>
  <title type='text'>EMACSPEAK  The Complete Audio Desktop</title><subtitle type='html'>
    Here is where I plan to Blog Emacspeak tricks and introduce new
    features as I implement them.
  </subtitle>
  <link rel='http://schemas.google.com/g/2005#feed' type='application/atom+xml' href='https://emacspeak.blogspot.com/feeds/posts/default'/>
  <link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/20280042/posts/default?max-results=10'/>
  <link rel='alternate' type='text/html' href='https://emacspeak.blogspot.com/'/>
  <link rel='hub' href='http://pubsubhubbub.appspot.com/'/>
  <link rel='next' type='application/atom+xml' href='https://www.blogger.com/feeds/20280042/posts/default?start-index=11&amp;max-results=10'/>
  <author>
    <name>T. V. Raman</name><uri>
      http://www.blogger.com/profile/03589687652590194428
    </uri>
    <email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='https://img1.blogblog.com/img/b16-rounded.gif'/>
  </author>
  <generator version='7.00' uri='http://www.blogger.com'>Blogger</generator><openSearch:totalResults>
    180
  </openSearch:totalResults>
  <openSearch:startIndex>1</openSearch:startIndex><openSearch:itemsPerPage>
    10
  </openSearch:itemsPerPage>
  <entry>
    <id>tag:blogger.com,1999:blog-20280042.post-2874306629833574905</id><published>
      2022-04-09T14:39:00.001-07:00
    </published>
    <updated>2022-04-09T14:39:13.463-07:00</updated><title type='text'>
      Advice On Emacs Advice
    </title>
    <content type='html'>&lt;div id=&quot;content&quot;
      class=&quot;content&quot;&gt;
      &lt;h1 class=&quot;title&quot;&gt;Advice On Emacs Advice&lt;/h1&gt;
      &lt;div id=&quot;outline-container-org303b39e&quot;
      class=&quot;outline-2&quot;&gt;
      &lt;h2 id=&quot;org303b39e&quot;&gt;&lt;span
      class=&quot;section-number-2&quot;&gt;1.&lt;/span&gt;
      Introduction&lt;/h2&gt;
      &lt;div class=&quot;outline-text-2&quot; id=&quot;text-1&quot;&gt;
      &lt;p&gt;
      Love it or hate it, lisp &lt;code&gt;advice&lt;/code&gt; is powerful
      and useful.  This
      article covers some of the places where
      &lt;code&gt;advice&lt;/code&gt; can provide a means
      of discovering useful behaviors that can then be later codified
      without resorting to advice. Advice can also prove to be a powerful
      means of experimentation; these experiments  can become permanent,
      e.g., when the
      resulting modifications introduced via
      &lt;code&gt;advice&lt;/code&gt; are only relevant to a small
      minority &amp;#x2014; a good example is package &lt;a
      
      href=&quot;https://github.com/tvraman/emacspeak&quot;&gt;Emacspeak&lt;/a&gt;. These are but two
      extremes of a continuum and &lt;code&gt;advice&lt;/code&gt; enables
      many possibilities in
      that range.
      &lt;/p&gt;
      
      &lt;p&gt;
      This article is written in the light of nearly 28 years of Emacspeak
      development, a time during which I have learn some useful lessons on
      how to use advice safely and program defensively. 
      This article itself does not take any position in the
      &lt;i&gt;Advice is evil,
      dont use it&lt;/i&gt; debate &amp;#x2014; it is here to help you if
      you do decide to use
      &lt;code&gt;advice&lt;/code&gt; for a given task.
      &lt;/p&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      
      &lt;div id=&quot;outline-container-org3b61f06&quot;
      class=&quot;outline-2&quot;&gt;
      &lt;h2 id=&quot;org3b61f06&quot;&gt;&lt;span
      class=&quot;section-number-2&quot;&gt;2.&lt;/span&gt; Where Advice
      Can Be Useful&lt;/h2&gt;
      &lt;div class=&quot;outline-text-2&quot; id=&quot;text-2&quot;&gt;
      &lt;ol class=&quot;org-ol&quot;&gt;
      &lt;li&gt;Temporarily  &lt;i&gt;trace&lt;/i&gt;  a given function
      &amp;#x2014; &lt;code&gt;advice&lt;/code&gt; can display
      messages on entry and exit to the adviced function. Emacs&#39; own
      built-in debug-on-entry mostly obviates the need to do
      this.&lt;/li&gt;
      &lt;li&gt;You want custom  behavior for some command in a package,
      where
      the package author (hasn&#39;t yet) provided an appropriate
      &lt;i&gt;before&lt;/i&gt;
      or &lt;i&gt;after&lt;/i&gt; hook. Implementing the desired behavior
      as a &lt;i&gt;before&lt;/i&gt;
      or &lt;i&gt;after&lt;/i&gt; advice is a friction-free means of
      experimenting with
      your idea. Once proven useful, the  advice-based prototype can be
      used to motivate the introduction of the new hook, and once
      implemented, you can eliminate the
      &lt;code&gt;advice&lt;/code&gt;.&lt;/li&gt;
      &lt;li&gt;Having implemented a custom behavior, you discover that
      theauthor of the package you are extending is unable to incorporate
      your suggestion. Advice here can provide a light-weight
      alternative to forking the package in question.&lt;/li&gt;
      &lt;li&gt;The modified behavior you wish to implement is relevant to
      a
      small minority. You need to advice a large number of functions
      because the modified behavior you desire requires complete access
      to the calling context and environment. A good example is
      generating rich contextual spoken feedback &amp;#x2014; advice is
      excellently suited to this task.&lt;/li&gt;
      &lt;/ol&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      
      &lt;div id=&quot;outline-container-org3ad6e12&quot;
      class=&quot;outline-2&quot;&gt;
      &lt;h2 id=&quot;org3ad6e12&quot;&gt;&lt;span
      class=&quot;section-number-2&quot;&gt;3.&lt;/span&gt; Advice
      Tips&lt;/h2&gt;
      &lt;div class=&quot;outline-text-2&quot; id=&quot;text-3&quot;&gt;
      &lt;p&gt;
      These tips are written in terms of
      &lt;code&gt;defadvice&lt;/code&gt; but apply equally well
      to the API introduced in module &lt;code&gt;nadvice&lt;/code&gt;.
      &lt;/p&gt;
      
      &lt;ol class=&quot;org-ol&quot;&gt;
      &lt;li&gt;Use &lt;code&gt;before/after&lt;/code&gt; advice as far as
      possible, and resort to
      &lt;code&gt;around&lt;/code&gt; advice only when you
      must.&lt;/li&gt;&lt;li&gt;Name all your
      &lt;code&gt;advice&lt;/code&gt; fragments consistently.&lt;/li&gt;
      &lt;li&gt;Do not depend on the argument names used in the function
      being
      adviced, instead use &lt;span
      class=&quot;underline&quot;&gt;ad-get-arg&lt;/span&gt; to
      positionally access the adviced
      function&#39;s arguments.&lt;/li&gt;
      &lt;li&gt;Use lexical scoping in all your functions, and be rigorous
      in
      declaring any special variables using &lt;span
      class=&quot;underline&quot;&gt;(cl-declare (special
      &amp;#x2026;))&lt;/span&gt; in your code. The byte-compiler is your
      friend; use this
      declaration when you see warnings about special
      variables.&lt;/li&gt;&lt;li&gt;Except for very simple advice
      fragments, use a &lt;span
      class=&quot;underline&quot;&gt;let&lt;/span&gt; form inside
      your advice to bind variables.&lt;/li&gt;
      &lt;li&gt;Within your advice, do not depend on any global state that
      you
      haven&#39;t yourself bound within the &lt;span
      class=&quot;underline&quot;&gt;let&lt;/span&gt; body in your
      advice.&lt;/li&gt;
      &lt;li&gt;If you write &lt;code&gt;around&lt;/code&gt; advice,
      ensure that the last form in your
      &lt;code&gt;advice&lt;/code&gt; is &lt;span
      class=&quot;underline&quot;&gt;ad-return-value&lt;/span&gt;. Dont
      modify this value unless you
      &lt;b&gt;absolutely&lt;/b&gt; must.&lt;/li&gt;
      &lt;li&gt;Make sure to use &lt;span
      class=&quot;underline&quot;&gt;ad-do-it&lt;/span&gt; in your
      &lt;code&gt;around&lt;/code&gt; advice so that the
      original function gets called &amp;#x2014; except in the very rare
      cases 
      where you want to entirely bypass the original function.&lt;/li&gt;
      &lt;li&gt;In the rare case where you have multiple &lt;span
      class=&quot;underline&quot;&gt;defadvice&lt;/span&gt; on the same
      function, note that you can specify the order win which these are
      called. Use this only when experimenting, and make sure to
      clean-up later by combining the advice fragments into a single
      call to &lt;code&gt;defadvice&lt;/code&gt;.&lt;/li&gt;
      &lt;/ol&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div id=&quot;outline-container-orgd77eefa&quot;
      class=&quot;outline-2&quot;&gt;
      &lt;h2 id=&quot;orgd77eefa&quot;&gt;&lt;span
      class=&quot;section-number-2&quot;&gt;4.&lt;/span&gt; Historical
      Note&lt;/h2&gt;
      &lt;div class=&quot;outline-text-2&quot; id=&quot;text-4&quot;&gt;
      &lt;ul class=&quot;org-ul&quot;&gt;
      &lt;li&gt;Advice was contributed to Emacs in early 1994 by Hans
      Chalupsky. I started the Emacspeak project a few months after and
      am indebted to him &amp;#x2014; both for his advice implementation
      and for
      numerous email exchanges with him at the time as I learnt to use 
      advice.&lt;/li&gt;
      &lt;li&gt;I released Emacspeak in April 1995. A few days later I was
      thrilled to receive a phone call from RMS &amp;#x2014; where he told
      me all
      the reasons why I shouldn&#39;t use advice. This was distressing to
      say the least; I had two choices &amp;#x2014; abandon Emacspeak
      usingadvice, or to ignore his advice. I took the middle-road; I made
      careful note of all his admonitions and warnings, and the result
      was to program defensively. Many of the tips listed in the
      previous section are a direct consequence of keeping an eye out
      for the various pitfalls he outlined during that phone
      call.&lt;/li&gt;
      &lt;li&gt;I&#39;ve also garnered useful tips and tricks on the
      emacs-devel list
      over the  years from folks like Stefan Mounier &amp;#x2014;
      especially as
      Emacs transitioned to module &lt;code&gt;nadvice&lt;/code&gt; in
      2014.&lt;/li&gt;
      &lt;/ul&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
    </content>
    <link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/20280042/posts/default/2874306629833574905'/>
    <link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/20280042/posts/default/2874306629833574905'/>
    <link rel='alternate' type='text/html' href='https://emacspeak.blogspot.com/2022/04/advice-on-emacs-advice.html' title='Advice On Emacs Advice'/>
    <author>
      <name>T. V. Raman</name><uri>
        http://www.blogger.com/profile/03589687652590194428
      </uri>
      <email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='https://img1.blogblog.com/img/b16-rounded.gif'/>
    </author>
  </entry>
  <entry>
    <id>tag:blogger.com,1999:blog-20280042.post-8282700412236478605</id><published>
      2021-11-25T07:09:00.002-08:00
    </published>
    <updated>2021-11-25T07:09:48.848-08:00</updated><title type='text'>
      Emacspeak In The Age Of Cloud Computing
    </title>
    <content type='html'>&lt;div id=&quot;content&quot;
      class=&quot;content&quot;&gt;
      &lt;h1 class=&quot;title&quot;&gt;Emacspeak In The Age Of Cloud
      Computing&lt;/h1&gt;
      &lt;div id=&quot;outline-container-orgd973121&quot;
      class=&quot;outline-2&quot;&gt;
      &lt;h2 id=&quot;orgd973121&quot;&gt;&lt;span
      class=&quot;section-number-2&quot;&gt;1.&lt;/span&gt; Executive
      Summary&lt;/h2&gt;
      &lt;div class=&quot;outline-text-2&quot; id=&quot;text-1&quot;&gt;
      &lt;p&gt;
      Emacspeak has supported &lt;i&gt;Cloud Computing&lt;/i&gt; since
      1995, i.e., long
      before the term was invented.  I have used Emacs with Emacspeak
      running on remote servers (called cloud-top in the rest of this
      article) since that time, with a local speech server on my client
      machine providing spoken feedback.  The underlying ssh-based scripts
      have changed over time; this article documents what I have been
      usingfor the last 7 years or more. As with everything else Linux,
      youshould not use this without understanding how it works. All of
      therelevant code is checked into GitHub, but if you use it without
      understanding, you are likely to get 2 for the price of 1😀.
      &lt;/p&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      
      &lt;div id=&quot;outline-container-orgce224d0&quot;
      class=&quot;outline-2&quot;&gt;
      &lt;h2 id=&quot;orgce224d0&quot;&gt;&lt;span
      class=&quot;section-number-2&quot;&gt;2.&lt;/span&gt; The
      Basics&lt;/h2&gt;
      &lt;div class=&quot;outline-text-2&quot; id=&quot;text-2&quot;&gt;
      &lt;ol class=&quot;org-ol&quot;&gt;
      &lt;li&gt;Emacspeak produces all spoken and non-spoken feedback via
      a &lt;i&gt;speech
      server&lt;/i&gt; &amp;#x2014; see &lt;a
      
      href=&quot;http://emacspeak.sourceforge.net/raman/publications/bc-emacspeak/&quot;&gt;Emacspeak: Beautiful Code&lt;/a&gt; for the detailed
      architecture overview.&lt;/li&gt;
      &lt;li&gt;This server runs as a separate process and can either run
      &lt;b&gt;locally&lt;/b&gt;
      i.e. on the machine running emacs; it can also run
      &lt;b&gt;remotely&lt;/b&gt;,
      e.g. your laptop from which  you login to your cloud-top.&lt;/li&gt;
      &lt;li&gt;Note the &lt;i&gt;local&lt;/i&gt; and
      &lt;i&gt;remote&lt;/i&gt; terminology in the above &amp;#x2014; to
      Emacspeak, the machine where Emacs runs is the local machine, so
      your machine in the cloud is &lt;b&gt;local&lt;/b&gt; to
      Emacspeak.&lt;/li&gt;
      &lt;li&gt;Consequently, the machine from where you SSH to the cloud,
      a
      laptop, a Raspberry Pi, or in a future a tin-can that you use as a
      client is &lt;b&gt;remote&lt;/b&gt; to emacspeak.&lt;/li&gt;
      &lt;/ol&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      
      &lt;div id=&quot;outline-container-org9d1d106&quot;
      class=&quot;outline-2&quot;&gt;
      &lt;h2 id=&quot;org9d1d106&quot;&gt;&lt;span
      class=&quot;section-number-2&quot;&gt;3.&lt;/span&gt; How It
      Works&lt;/h2&gt;
      &lt;div class=&quot;outline-text-2&quot; id=&quot;text-3&quot;&gt;
      &lt;ol class=&quot;org-ol&quot;&gt;
      &lt;li&gt;When you start Emacs with Emacspeak loaded, Emacs starts
      the
      speech-server as the first step in the emacspeak startup.
      normally this starts the local server for your  prefered TTS
      engine.&lt;/li&gt;
      &lt;li&gt;See the emacspeak manual for how this speech-server is
      determined.&lt;/li&gt;
      &lt;li&gt;When running Emacspeak on a cloud-top, this &lt;i&gt;local
      speech server&lt;/i&gt; is just a
      simple shell script that connects to a local port  &amp;#x2014; by
      default    &lt;b&gt;2222&lt;/b&gt;.&lt;/li&gt;
      &lt;li&gt;When you connect to your cloud-top via SSH, you first
      &lt;i&gt;reverse port
      forward&lt;/i&gt; port &lt;b&gt;2222&lt;/b&gt; from the cloud-top
      back to your client. This
      causes data sent to port &lt;b&gt;2222&lt;/b&gt; on the cloud-top by
      Emacs to show
      up on port &lt;b&gt;2222&lt;/b&gt; on the local machine where your
      speech server is listening.&lt;/li&gt;
      &lt;li&gt;With that reverse port forwarding in place and assuming
      that
      &lt;code&gt;espeak&lt;/code&gt; is your TTS engine, running the
      speech-server
      &lt;code&gt;cloud-espeak&lt;/code&gt; on the cloud-top connects back
      to your client to
      produce spoken output.&lt;/li&gt;
      &lt;li&gt;For the previous step to work, something (or someone)
      needs to be
      listening on port &lt;b&gt;2222&lt;/b&gt; on your client.&lt;/li&gt;
      &lt;li&gt;&lt;p&gt;
      So you need to start the relevant speech server  on your client
      before you &lt;code&gt;ssh&lt;/code&gt; to your cloud-top
      &amp;#x2014; in the case of &lt;code&gt;espeak&lt;/code&gt;,
      this is &lt;code&gt;ssh-espeak&lt;/code&gt;.
      &lt;/p&gt;
      
      &lt;p&gt;
      See directory &lt;code&gt;bash-utils&lt;/code&gt; in your emacspeak
      Git checkout for the
      relevant Bash scripts.
      &lt;/p&gt;&lt;/li&gt;
      &lt;/ol&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      
      &lt;div id=&quot;outline-container-org81b1ca8&quot;
      class=&quot;outline-2&quot;&gt;
      &lt;h2 id=&quot;org81b1ca8&quot;&gt;&lt;span
      class=&quot;section-number-2&quot;&gt;4.&lt;/span&gt;
      Workflow&lt;/h2&gt;
      &lt;div class=&quot;outline-text-2&quot; id=&quot;text-4&quot;&gt;
      &lt;p&gt;
      Here is what the workflow looks like, again, use this &lt;b&gt;only
      if&lt;/b&gt;
      you have read and understood the previous section.
      See&lt;a
      
      href=&quot;https://github.com/tvraman/emacspeak/blob/master/bash-utils/remote#L8&quot;&gt;Bash Utils&lt;/a&gt; for the scripts mentioned below. Everything below
      assumes a Bash Shell.
      &lt;/p&gt;
      
      &lt;p&gt;
      On your cloud-top, specify the speech-server to use by running
      &lt;/p&gt;
      
      &lt;pre class=&quot;example&quot;&gt;
      export DTK_PROGRAM=cloud-espeak
      &lt;/pre&gt;
      
      
      &lt;p&gt;
      You can put the above in your 
      &lt;code&gt;.bash_profile&lt;/code&gt; on your cloud-top.
      &lt;/p&gt;
      
      &lt;p&gt;
      On your client device, run
      &lt;/p&gt;
      
      &lt;pre class=&quot;example&quot;&gt;
      . &amp;lt;emacspeak_dir&amp;gt;/bash-utils/remote
      &lt;/pre&gt;
      
      
      &lt;p&gt;
      This need be done only once per interactive shell.It defines
      &lt;code&gt;bash&lt;/code&gt;
      functions &lt;span
      class=&quot;underline&quot;&gt;remote&lt;/span&gt; and &lt;span
      class=&quot;underline&quot;&gt;rtts&lt;/span&gt;.
      &lt;/p&gt;
      
      &lt;p&gt;
      Next, run  Bash function &lt;span
      class=&quot;underline&quot;&gt;remote&lt;/span&gt; defined in the
      script you just
      loaded.
      &lt;/p&gt;
      
      &lt;pre class=&quot;example&quot;&gt;
      remote host.example.com  speech-server espeak
      &lt;/pre&gt;
      
      
      &lt;p&gt;
      This does the following:
      &lt;/p&gt;
      
      &lt;ol class=&quot;org-ol&quot;&gt;
      &lt;li&gt;Starts a local speech server for the TTS engine
      &lt;code&gt;espeak&lt;/code&gt;.&lt;/li&gt;
      &lt;li&gt;Opens an SSH session to the cloud-top
      host.example.com.&lt;/li&gt;
      &lt;li&gt;Plays a musical chime (using &lt;code&gt;sox&lt;/code&gt;)
      to cue completion.&lt;/li&gt;
      &lt;li&gt;Depending on your SSH setup, you may or may not need to
      type your
      ssh password at this point; avoiding having to type a password is
      beyond the perview of this article, consult the SSH manual
      pages.&lt;/li&gt;
      &lt;li&gt;Now, run Emacs on  the cloud-top. Assuming that you have
      updated
      your Emacs initialization to load Emacspeak, this will get
      Emacspeak running on   the cloud-top talking on your
      client.&lt;/li&gt;
      &lt;li&gt;Note that typically, you should run something like
      &lt;code&gt;screen&lt;/code&gt; on the
      cloud-top and run Emacs within that &lt;code&gt;screen&lt;/code&gt;
      session; this will let
      you persist a running Emacs across multiple login/logout.&lt;/li&gt;
      &lt;/ol&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      
      &lt;div id=&quot;outline-container-org4676fc9&quot;
      class=&quot;outline-2&quot;&gt;
      &lt;h2 id=&quot;org4676fc9&quot;&gt;&lt;span
      class=&quot;section-number-2&quot;&gt;5.&lt;/span&gt; Experience On
      A Well-Configured Setup&lt;/h2&gt;
      &lt;div class=&quot;outline-text-2&quot; id=&quot;text-5&quot;&gt;
      &lt;p&gt;
      On a well-configured setup, you typically need only do:
      &lt;/p&gt;
      
      &lt;ol class=&quot;org-ol&quot;&gt;
      &lt;li&gt;Run the bash function that starts the local TTS server,
      and then
      connects to the cloud-top via SSH with reverse-port forwarding
      active.&lt;/li&gt;
      &lt;li&gt;Assuming there is an Emacs session running under screen at
      the
      remote end, it&#39;ll start talking on your local client.&lt;/li&gt;
      &lt;/ol&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
    </content>
    <link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/20280042/posts/default/8282700412236478605'/>
    <link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/20280042/posts/default/8282700412236478605'/>
    <link rel='alternate' type='text/html' href='https://emacspeak.blogspot.com/2021/11/emacspeak-in-age-of-cloud-computing.html' title='Emacspeak In The Age Of Cloud Computing'/>
    <author>
      <name>T. V. Raman</name><uri>
        http://www.blogger.com/profile/03589687652590194428
      </uri>
      <email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='https://img1.blogblog.com/img/b16-rounded.gif'/>
    </author>
  </entry>
  <entry>
    <id>tag:blogger.com,1999:blog-20280042.post-3740089600894731588</id><published>
      2021-11-24T08:30:00.000-08:00
    </published>
    <updated>2021-11-24T08:30:02.614-08:00</updated><title type='text'>
      Announcing Emacspeak 55.0 (CalmDog)
    </title>
    <content type='html'>&lt;div id=&quot;content&quot;
      class=&quot;content&quot;&gt;
      &lt;h1 class=&quot;title&quot;&gt;Announcing Emacspeak
      55.0—CalmDog!&lt;/h1&gt;
      &lt;p&gt;
      The enjoyment of one&#39;s tools is an essential ingredient of
      successful work. &amp;#x2013; Donald E. Knuth
      &lt;/p&gt;
      
      &lt;div id=&quot;outline-container-org458a930&quot;
      class=&quot;outline-2&quot;&gt;
      &lt;h2 id=&quot;org458a930&quot;&gt;&lt;span
      class=&quot;section-number-2&quot;&gt;1.&lt;/span&gt; For Immediate
      Release:&lt;/h2&gt;
      &lt;div class=&quot;outline-text-2&quot; id=&quot;text-1&quot;&gt;
      &lt;p&gt;
      San Jose, CA, (Nov 24, 2021)
      &lt;/p&gt;
      &lt;/div&gt;
      
      &lt;div id=&quot;outline-container-orgbf9ddd1&quot;
      class=&quot;outline-3&quot;&gt;
      &lt;h3 id=&quot;orgbf9ddd1&quot;&gt;&lt;span
      class=&quot;section-number-3&quot;&gt;1.1.&lt;/span&gt; Emacspeak
      55.0 (CalmDog)  Unleashed!  🦮&lt;/h3&gt;
      &lt;div class=&quot;outline-text-3&quot; id=&quot;text-1-1&quot;&gt;
      &lt;p&gt;
      &amp;#x2014; Making Accessible Computing Effortless!
      &lt;/p&gt;
      
      &lt;p&gt;
      Advancing Accessibility In The Age Of User-Aware Interfaces
      &amp;#x2014; Zero
      cost of Ownership makes priceless software Universally affordable!
      &lt;/p&gt;
      
      &lt;p&gt;
      Emacspeak Inc (NASDOG: ESPK) &amp;#x2014; &lt;a
      
      href=&quot;http://github.com/tvraman/emacspeak&quot;&gt;http://github.com/tvraman/emacspeak&lt;/a&gt;
      announces  immediate world-wide availability of &lt;a
      
      href=&quot;https://github.com/tvraman/emacspeak/releases/download/54.0/emacspeak-53.0.tar.bz2&quot;&gt;Emacspeak 55.0&lt;/a&gt;
      (CalmDog) 🦮 &amp;#x2014; a powerful audio desktop that leverages
      today&#39;s
      evolving Data, Social and Assistant-Oriented Internet cloud to
      enableworking efficiently and effectively from anywhere!
      &lt;/p&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      
      &lt;div id=&quot;outline-container-org648436e&quot;
      class=&quot;outline-2&quot;&gt;
      &lt;h2 id=&quot;org648436e&quot;&gt;&lt;span
      class=&quot;section-number-2&quot;&gt;2.&lt;/span&gt; Investors
      Note:&lt;/h2&gt;
      &lt;div class=&quot;outline-text-2&quot; id=&quot;text-2&quot;&gt;
      &lt;p&gt;
      With several prominent tweeters expanding coverage of &lt;span
      class=&quot;underline&quot;&gt;#emacspeak&lt;/span&gt;,
      NASDOG: ESPK has now been consistently trading over the social net
      atlevels close to that once attained by DogCom high-fliers—and is
      trading at levels close to that achieved by once better known stocks
      in the tech sector.
      &lt;/p&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      
      &lt;div id=&quot;outline-container-orga01459f&quot;
      class=&quot;outline-2&quot;&gt;
      &lt;h2 id=&quot;orga01459f&quot;&gt;&lt;span
      class=&quot;section-number-2&quot;&gt;3.&lt;/span&gt; What Is
      It?&lt;/h2&gt;
      &lt;div class=&quot;outline-text-2&quot; id=&quot;text-3&quot;&gt;
      &lt;p&gt;
      Emacspeak is a fully functional audio desktop that provides complete
      eyes-free access to all major 32 and 64 bit operating environments.
      By
      seamlessly blending live access to all aspects of the Internet such
      as
      ubiquitous assistance, Web-surfing, blogging, remote software
      development, social computing and electronic messaging into the
      audiodesktop, Emacspeak enables spoken access to local and remote
      information with a consistent and well-integrated user interface. A
      rich suite of task-oriented tools provides efficient speech-enabled
      access to the evolving assistant-oriented social Internet cloud.
      &lt;/p&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      
      &lt;div id=&quot;outline-container-org32377e2&quot;
      class=&quot;outline-2&quot;&gt;
      &lt;h2 id=&quot;org32377e2&quot;&gt;&lt;span
      class=&quot;section-number-2&quot;&gt;4.&lt;/span&gt; Major
      Enhancements:&lt;/h2&gt;
      &lt;div class=&quot;outline-text-2&quot; id=&quot;text-4&quot;&gt;
      &lt;ol class=&quot;org-ol&quot;&gt;
      &lt;li&gt;Speech-enable Emacs Application Framework  &lt;/li&gt;
      &lt;li&gt;Updated Soundscapes 🔊&lt;/li&gt;
      &lt;li&gt;Updated Auditory Icons 🎧&lt;/li&gt;
      &lt;li&gt;Updated Transient Support 𝥍&lt;/li&gt;
      &lt;li&gt;Speech-Enabled CalibreDB  📚&lt;/li&gt;
      &lt;li&gt;&lt;p&gt;
      External Browsers From EWW  🕸
      &lt;/p&gt;
      
      &lt;p&gt;
      — And a lot more than will fit this margin. … 🗞
      &lt;/p&gt;&lt;/li&gt;
      &lt;/ol&gt;
      
      &lt;p&gt;
      Note: This version &lt;b&gt;requires&lt;/b&gt; emacs-27.1 or later. 
      &lt;/p&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      
      &lt;div id=&quot;outline-container-orgba428e9&quot;
      class=&quot;outline-2&quot;&gt;
      &lt;h2 id=&quot;orgba428e9&quot;&gt;&lt;span
      class=&quot;section-number-2&quot;&gt;5.&lt;/span&gt; Establishing
      Liberty, Equality And Freedom:&lt;/h2&gt;
      &lt;div class=&quot;outline-text-2&quot; id=&quot;text-5&quot;&gt;
      &lt;p&gt;
      Never a toy system, Emacspeak is voluntarily bundled with all
      major Linux distributions. Though designed to be modular,
      distributors have freely chosen to bundle the fully integrated
      system without any undue pressure—a documented success for
      the integrated innovation embodied by Emacspeak. As the system
      evolves, both upgrades and downgrades continue to be available at
      the same zero-cost to all users. The integrity of the Emacspeak
      codebase is ensured by the reliable and secure Linux platform
      and the underlying GIT versioning software used to develop and
      distribute the system.
      &lt;/p&gt;
      
      &lt;p&gt;
      Extensive studies have shown that thanks to these features, users
      consider Emacspeak to be absolutely priceless. Thanks to this
      wide-spread user demand, the present version remains   free of cost 
      as ever—it is being made available at the same zero-cost as
      previous releases.
      &lt;/p&gt;
      
      &lt;p&gt;
      At the same time, Emacspeak continues to innovate in the area of
      eyes-free Assistance and social interaction and carries forward the
      well-established Open Source tradition of introducing user interface
      features that eventually show up in luser environments.
      &lt;/p&gt;
      
      &lt;p&gt;
      On this theme, when once challenged by a proponent of a crash-prone
      but well-marketed mousetrap with the assertion &quot;Emacs is a
      system from
      the 70&#39;s&quot;, the creator of Emacspeak evinced surprise at the
      unusual
      candor manifest in the assertion that it would take popular
      idiot-proven interfaces until the year 2070 to catch up to where the
      Emacspeak audio desktop is today. Industry experts welcomed this
      refreshing breath of Courage Certainty and Clarity (CCC) at a time
      when users are reeling from the Fear Uncertainty and Doubt (FUD)
      unleashed by complex software systems backed by even more convoluted
      press releases.
      &lt;/p&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      
      &lt;div id=&quot;outline-container-org3ac4067&quot;
      class=&quot;outline-2&quot;&gt;
      &lt;h2 id=&quot;org3ac4067&quot;&gt;&lt;span
      class=&quot;section-number-2&quot;&gt;6.&lt;/span&gt; Independent
      Test Results:&lt;/h2&gt;
      &lt;div class=&quot;outline-text-2&quot; id=&quot;text-6&quot;&gt;
      &lt;p&gt;
      Independent test results have proven that unlike some modern (and
      not so modern) software, Emacspeak can be safely uninstalled without
      adversely affecting the continued performance of the computer. These
      same tests also revealed that once uninstalled, the user stopped
      functioning altogether. Speaking with Aster Labrador, the creator of
      Emacspeak once pointed out that these results re-emphasize the
      user-centric design of Emacspeak; “It is the user &amp;#x2014; and
      not the
      computer&amp;#x2013; that stops functioning when Emacspeak is
      uninstalled!”.
      &lt;/p&gt;
      &lt;/div&gt;
      
      &lt;div id=&quot;outline-container-org3dc256b&quot;
      class=&quot;outline-3&quot;&gt;
      &lt;h3 id=&quot;org3dc256b&quot;&gt;&lt;span
      class=&quot;section-number-3&quot;&gt;6.1.&lt;/span&gt; Note from
      Aster,Bubbles and Tilden:&lt;/h3&gt;
      &lt;div class=&quot;outline-text-3&quot; id=&quot;text-6-1&quot;&gt;
      &lt;p&gt;
      UnDoctored Videos Inc. is looking for volunteers to star in a
      video demonstrating such complete user failure.
      &lt;/p&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      
      &lt;div id=&quot;outline-container-org13d725e&quot;
      class=&quot;outline-2&quot;&gt;
      &lt;h2 id=&quot;org13d725e&quot;&gt;&lt;span
      class=&quot;section-number-2&quot;&gt;7.&lt;/span&gt; Obtaining
      Emacspeak:&lt;/h2&gt;
      &lt;div class=&quot;outline-text-2&quot; id=&quot;text-7&quot;&gt;
      &lt;p&gt;
      Emacspeak can be downloaded from GitHub &amp;#x2014; see
      &lt;a
      
      href=&quot;https://github.com/tvraman/emacspeak&quot;&gt;https://github.com/tvraman/emacspeak&lt;/a&gt; you can visit Emacspeak on the
      WWW at &lt;a
      
      href=&quot;http://emacspeak.sf.net&quot;&gt;http://emacspeak.sf.net&lt;/a&gt;. You can subscribe to the emacspeak
      mailing list — &lt;a
      
      href=&quot;http://mail.emacspeak.org&quot;&gt;emacspeak@emacspeak.org&lt;/a&gt;.  The &lt;a href=&quot;http://emacspeak.blogspot.com&quot;&gt;Emacspeak Blog&lt;/a&gt; is a good
      source for news about recent enhancements and how to use them.
      &lt;/p&gt;
      
      &lt;p&gt;
      The latest development snapshot of Emacspeak is always available at
      &lt;a
      
      href=&quot;https://github.com/tvraman/emacspeak&quot;&gt;GitHub&lt;/a&gt;.
      &lt;/p&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      
      &lt;div id=&quot;outline-container-org11d427d&quot;
      class=&quot;outline-2&quot;&gt;
      &lt;h2 id=&quot;org11d427d&quot;&gt;&lt;span
      class=&quot;section-number-2&quot;&gt;8.&lt;/span&gt;
      History:&lt;/h2&gt;
      &lt;div class=&quot;outline-text-2&quot; id=&quot;text-8&quot;&gt;
      &lt;ul class=&quot;org-ul&quot;&gt;
      &lt;li&gt;Emacspeak 55.0 (CalmDog) attempts to be as calm as
      Tilden.&lt;/li&gt;
      &lt;li&gt;Emacspeak 54.0 (EZDog) learns to take it easy from
      Tilden.&lt;/li&gt;
      &lt;li&gt;Emacspeak 53.0 (EfficientDog)  focuses on 
      efficiency.&lt;/li&gt;
      &lt;li&gt;Emacspeak 52.0 (WorkAtHomeDog) makes working remotely a
      pleasurable experience.&lt;/li&gt;
      &lt;li&gt;Bigger and more powerful than any smart assistAnt,
      AssistDog provides&lt;/li&gt;
      &lt;/ul&gt;
      &lt;p&gt;
      instant access to the most relevant information at all times.
      &lt;/p&gt;
      &lt;ul class=&quot;org-ul&quot;&gt;
      &lt;li&gt;Emacspeak 50.0 (SageDog) embraces the wisdom of stability
      as
      opposed to rapid change and the concomitant  creation of bugs.🚭: 
      Naturally Intelligent (NI)™ at how information is spoken,
      Emacspeak&lt;/li&gt;
      &lt;/ul&gt;
      &lt;p&gt;
      is entirely free of Artificial Ingredients (AI)™.
      &lt;/p&gt;
      &lt;ul class=&quot;org-ul&quot;&gt;
      &lt;li&gt;Emacspeak 49.0 (WiseDog) leverages the wisdom gleaned from
      earlier releases to provide an enhanced  auditory
      experience.&lt;/li&gt;
      &lt;li&gt;Emacspeak 48.0  (ServiceDog) builds on earlier releases to
      provide
      continued end-user value.&lt;/li&gt;
      &lt;li&gt;Emacspeak 47.0 (GentleDog) goes the next step in being
      helpful
      while letting users learn and grow.&lt;/li&gt;
      &lt;li&gt;Emacspeak 46.0 (HelpfulDog) heralds the  coming of Smart
      Assistants.&lt;/li&gt;
      &lt;li&gt;Emacspeak 45.0 (IdealDog) is named in recognition of
      Emacs&#39;
      excellent integration with various programming language
      environments &amp;#x2014; thanks to this, Emacspeak is the IDE of
      choice
      for eyes-free software engineering.&lt;/li&gt;
      &lt;li&gt;Emacspeak 44.0 continues the steady pace of innovation on
      the
      audio desktop.&lt;/li&gt;
      &lt;li&gt;Emacspeak  43.0 brings even more end-user efficiency by
      leveraging the
      ability to spatially place multiple audio streams to provide timely
      auditory feedback.&lt;/li&gt;
      &lt;li&gt;Emacspeak 42.0 while moving to GitHub from Google Code
      continues to
      innovate in the areas of auditory user interfaces and efficient,
      light-weight Internet access.&lt;/li&gt;
      &lt;li&gt;Emacspeak 41.0 continues to improve 
      on  the desire to provide not just equal, but superior access —
      technology when correctly implemented can significantly enhance the
      human ability.&lt;/li&gt;
      &lt;li&gt;Emacspeak 40.0 goes back to Web basics by enabling
      &lt;a
      
      href=&quot;http://emacspeak.blogspot.com/2013/11/reading-web-content-efficiently.html&quot;&gt;efficient access&lt;/a&gt; to large amounts of readable Web content.&lt;/li&gt;
      &lt;li&gt;Emacspeak 39.0 continues the Emacspeak tradition of
      increasing the breadth of
      user tasks that are covered without introducing unnecessary
      bloatware.&lt;/li&gt;
      &lt;li&gt;Emacspeak 38.0 is the latest in a series of award-winning
      releases from Emacspeak Inc.&lt;/li&gt;
      &lt;li&gt;Emacspeak 37.0 continues the tradition of
      delivering robust software as reflected by its code-name.&lt;/li&gt;
      &lt;li&gt;Emacspeak 36.0 enhances the audio desktop with many new
      tools including full
      EPub support — hence the name EPubDog.&lt;/li&gt;
      &lt;li&gt;Emacspeak 35.0 is all about
      teaching a new dog old tricks — and is aptly code-named HeadDog in
      on  of our new Press/Analyst contact. emacspeak-34.0 (AKA Bubbles)
      established a new beach-head with respect to rapid task completion
      inan eyes-free environment.&lt;/li&gt;
      &lt;li&gt;Emacspeak-33.0 AKA StarDog brings
      unparalleled cloud access to the audio desktop.&lt;/li&gt;
      &lt;li&gt;Emacspeak 32.0 AKA
      LuckyDog continues to innovate via open technologies for better
      access.&lt;/li&gt;
      &lt;li&gt;Emacspeak 31.0 AKA TweetDog — adds tweeting to the
      Emacspeak
      desktop.&lt;/li&gt;
      &lt;li&gt;Emacspeak 30.0 AKA SocialDog brings the Social Web to the
      audio desktop—you cant but be social if you speak!&lt;/li&gt;
      &lt;li&gt;Emacspeak 29.0—AKAAbleDog—is a testament to the
      resilliance and innovation
      embodied by Open Source software—it would not exist without the
      thriving Emacs community that continues to ensure that Emacs remains
      one of the premier user environments despite perhaps also being one
      of
      the oldest.&lt;/li&gt;
      &lt;li&gt;Emacspeak 28.0—AKA PuppyDog—exemplifies the rapid pace
      of
      development evinced by Open Source software.&lt;/li&gt;
      &lt;li&gt;Emacspeak 27.0—AKA
      FastDog—is the latest in a sequence of upgrades that make previous
      releases obsolete and downgrades unnecessary.&lt;/li&gt;
      &lt;li&gt;Emacspeak 26—AKA
      LeadDog—continues the tradition of introducing innovative access
      solutions that are unfettered by the constraints inherent in
      traditional adaptive technologies.&lt;/li&gt;
      &lt;li&gt;Emacspeak 25 —AKA ActiveDog
      —re-activates open, unfettered access to online
      information.&lt;/li&gt;
      &lt;li&gt;Emacspeak-Alive —AKA LiveDog —enlivens open,
      unfetteredinformation access with a series of live updates that once
      again
      demonstrate the power and agility of open source software
      development.&lt;/li&gt;
      &lt;li&gt;Emacspeak 23.0 &amp;#x2014; AKA Retriever—went the extra
      mile in
      fetching full access.&lt;/li&gt;
      &lt;li&gt;Emacspeak 22.0 —AKA GuideDog —helps users
      navigate the Web more effectively than ever before.&lt;/li&gt;
      &lt;li&gt;Emacspeak 21.0
      —AKA PlayDog —continued the 
      Emacspeak tradition of relying on enhanced
      productivity to liberate users.&lt;/li&gt;
      &lt;li&gt;Emacspeak-20.0 —AKA LeapDog —continues
      the long established GNU/Emacs tradition of integrated innovation to
      create a pleasurable computing environment for eyes-free
      interaction.&lt;/li&gt;
      &lt;li&gt;emacspeak-19.0 &amp;#x2013;AKA WorkDog&amp;#x2013; is
      designed to enhance
      user productivity at work and leisure.&lt;/li&gt;
      &lt;li&gt;Emacspeak-18.0 &amp;#x2013;code named
      GoodDog&amp;#x2013; continued the Emacspeak tradition of enhancing
      user
      productivity and thereby reducing total cost of
      ownership.&lt;/li&gt;
      &lt;li&gt;Emacspeak-17.0 &amp;#x2013;code named HappyDog&amp;#x2013;
      enhances user
      productivity by exploiting today&#39;s evolving WWW
      standards.&lt;/li&gt;
      &lt;li&gt;Emacspeak-16.0 &amp;#x2013;code named
      CleverDog&amp;#x2013; the follow-up to
      SmartDog&amp;#x2013; continued the tradition of working better,
      faster,
      smarter.&lt;/li&gt;
      &lt;li&gt;Emacspeak-15.0 &amp;#x2013;code named
      SmartDog&amp;#x2013;followed up on TopDog
      as the next in a continuing  series of award-winning audio desktop
      releases from  Emacspeak Inc.&lt;/li&gt;
      &lt;li&gt;Emacspeak-14.0 &amp;#x2013;code named
      TopDog&amp;#x2013;was&lt;/li&gt;
      &lt;/ul&gt;
      &lt;p&gt;
      the first release of this millennium. 
      &lt;/p&gt;
      &lt;ul class=&quot;org-ul&quot;&gt;
      &lt;li&gt;Emacspeak-13.0 &amp;#x2013;codenamed
      YellowLab&amp;#x2013; was the closing release of the
      20th. century.&lt;/li&gt;
      &lt;li&gt;Emacspeak-12.0 &amp;#x2013;code named
      GoldenDog&amp;#x2013; began
      leveraging the evolving semantic WWW to provide task-oriented speech
      access to Webformation.&lt;/li&gt;
      &lt;li&gt;Emacspeak-11.0 &amp;#x2013;code named Aster&amp;#x2013;
      went the
      final step in making Linux a zero-cost Internet access solution for
      blind and visually impaired users.&lt;/li&gt;
      &lt;li&gt;Emacspeak-10.0 &amp;#x2013;(AKA
      Emacspeak-2000) code named WonderDog&amp;#x2013; continued the
      tradition of
      award-winning software releases designed to make eyes-free computing
      a
      productive and pleasurable experience.&lt;/li&gt;
      &lt;li&gt;Emacspeak-9.0 &amp;#x2013;(AKA
      Emacspeak 99) code named BlackLab&amp;#x2013; continued to innovate
      in the areas
      of speech interaction and interactive accessibility.&lt;/li&gt;
      &lt;li&gt;Emacspeak-8.0 &amp;#x2013;(AKA Emacspeak-98++) code named
      BlackDog&amp;#x2013; was a major upgrade to
      the speech output extension to Emacs.&lt;/li&gt;
      &lt;li&gt;Emacspeak-95 (code named Illinois) was released as
      OpenSource on
      the Internet in May 1995 as the first complete speech interface
      to UNIX workstations. The subsequent release, Emacspeak-96 (code
      named Egypt) made available in May 1996 provided significant
      enhancements to the interface. Emacspeak-97 (Tennessee) went
      further in providing a true audio desktop. Emacspeak-98
      integrated Internetworking into all aspects of the audio desktop
      to provide the first fully interactive speech-enabled
      WebTop.&lt;/li&gt;
      &lt;/ul&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      
      &lt;div id=&quot;outline-container-orgd434354&quot;
      class=&quot;outline-2&quot;&gt;
      &lt;h2 id=&quot;orgd434354&quot;&gt;&lt;span
      class=&quot;section-number-2&quot;&gt;9.&lt;/span&gt; About
      Emacspeak:&lt;/h2&gt;
      &lt;div class=&quot;outline-text-2&quot; id=&quot;text-9&quot;&gt;
      &lt;p&gt;
      Originally based at Cornell (NY) —
      &lt;a
      
      href=&quot;http://www.cs.cornell.edu/home/raman&quot;&gt;http://www.cs.cornell.edu/home/raman&lt;/a&gt; —home to Auditory User
      Interfaces (AUI) on the WWW,  Emacspeak is now maintained on GitHub
      —&lt;a
      
      href=&quot;https://github.com/tvraman/emacspeak&quot;&gt;https://github.com/tvraman/emacspeak&lt;/a&gt;. The system is mirrored
      world-wide by an international network of software archives and
      bundled voluntarily with all major Linux distributions. On Monday,
      April 12, 1999, Emacspeak became part of the &lt;a
      
      href=&quot;http://tvraman.github.io/emacspeak/blog/smithsonian-study.html&quot;&gt;Smithsonian&#39;s Permanent
      Research Collection&lt;/a&gt; on Information Technology at the
      Smithsonian&#39;s
      National Museum of American History.
      &lt;/p&gt;
      
      &lt;p&gt;
      The Emacspeak mailing list is archived at
      &lt;a href=&quot;https://www.emacspeak.org&quot;&gt;Emacspeak Mail
      Archive&lt;/a&gt; &amp;#x2013;the home of the
      Emacspeak mailing list&amp;#x2013; thanks to Greg Priest-Dorman, and
      provides a
      valuable knowledge base for new users.
      &lt;/p&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      
      
      &lt;div id=&quot;outline-container-org3940d8e&quot;
      class=&quot;outline-2&quot;&gt;
      &lt;h2 id=&quot;org3940d8e&quot;&gt;&lt;span
      class=&quot;section-number-2&quot;&gt;10.&lt;/span&gt; Press/Analyst
      Contact: Tilden Labrador&lt;/h2&gt;
      &lt;div class=&quot;outline-text-2&quot; id=&quot;text-10&quot;&gt;
      &lt;p&gt;
      Going forward, Tilden acknowledges his exclusive monopoly on
      setting the direction of the Emacspeak Audio Desktop (🦮) and
      promises to exercise this freedom to innovate and her resulting
      power responsibly (as before) in the interest of all dogs.
      &lt;/p&gt;
      
      &lt;p&gt;
      *About This Release:
      &lt;/p&gt;
      &lt;hr /&gt;
      
      &lt;p&gt;
      Windows-Free (WF) is a favorite battle-cry of The League Against
      Forced Fenestration (LAFF).  &amp;#x2013;see
      &lt;a
      
      href=&quot;http://www.usdoj.gov/atr/cases/f3800/msjudgex.htm&quot;&gt;http://www.usdoj.gov/atr/cases/f3800/msjudgex.htm&lt;/a&gt; for details on
      the ill-effects of Forced Fenestration.
      &lt;/p&gt;
      
      &lt;p&gt;
      CopyWrite )C( Aster, Hubbell and Tilden Labrador. All Writes
      Reserved.
      HeadDog (DM), LiveDog (DM), GoldenDog (DM), BlackDog (DM) etc., are
      Registered
      Dogmarks of Aster,  Hubbell  and Tilden Labrador.  All other dogs
      belong to
      their respective owners.
      &lt;/p&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;	
    </content>
    <link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/20280042/posts/default/3740089600894731588'/>
    <link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/20280042/posts/default/3740089600894731588'/>
    <link rel='alternate' type='text/html' href='https://emacspeak.blogspot.com/2021/11/announcing-emacspeak-550-calmdog.html' title='Announcing Emacspeak 55.0 (CalmDog)'/>
    <author>
      <name>T. V. Raman</name><uri>
        http://www.blogger.com/profile/03589687652590194428
      </uri>
      <email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='https://img1.blogblog.com/img/b16-rounded.gif'/>
    </author>
  </entry>
  <entry>
    <id>tag:blogger.com,1999:blog-20280042.post-6263923850603207795</id><published>
      2021-09-19T10:49:00.001-07:00
    </published>
    <updated>2021-09-19T10:49:21.997-07:00</updated><title type='text'>
      Generalize Snarf Tool: How The General Can Be Simpler Than The
      Specific
    </title>
    <content type='html'>&lt;div id=&quot;content&quot;&gt;
      &lt;h1 class=&quot;title&quot;&gt;Generalize Snarf Tool: How The
      General Can Be Simpler Than The Specific&lt;/h1&gt;
      &lt;div id=&quot;outline-container-org4d4e143&quot;
      class=&quot;outline-2&quot;&gt;
      &lt;h2 id=&quot;org4d4e143&quot;&gt;&lt;span
      class=&quot;section-number-2&quot;&gt;1&lt;/span&gt; Executive
      Summary&lt;/h2&gt;
      &lt;div class=&quot;outline-text-2&quot; id=&quot;text-1&quot;&gt;
      &lt;p&gt;
      The
      &lt;a
      
      href=&quot;https://emacspeak.blogspot.com/2021/09/snarfing-string-within-delimiters-with.html&quot;&gt;previous article&lt;/a&gt; detailed the implementation of a simple function
      that lets you snarf the contents within a pair of delimiters. That
      version handled a set of generic delimiters, and errored out if
      point was not on one of the pre-defined delimiters.
      &lt;/p&gt;
      
      &lt;p&gt;
      This article shows how that solution can be generalized
      to cases where point is not on a pre-defined delimiter; in the
      process, it weighs the pros and cons of usability vs over-generality
      and shows an implementation that attempts to strike a good balance.
      &lt;/p&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      
      
      &lt;div id=&quot;outline-container-org11a0752&quot;
      class=&quot;outline-2&quot;&gt;
      &lt;h2 id=&quot;org11a0752&quot;&gt;&lt;span
      class=&quot;section-number-2&quot;&gt;2&lt;/span&gt; The Updated
      Implementation&lt;/h2&gt;
      &lt;div class=&quot;outline-text-2&quot; id=&quot;text-2&quot;&gt;
      &lt;div class=&quot;org-src-container&quot;&gt;
      &lt;pre class=&quot;src src-emacs-lisp&quot;&gt;(&lt;span
      style=&quot;color: #b6a0ff;&quot;&gt;defun&lt;/span&gt; &lt;span
      style=&quot;color: #feacd0;&quot;&gt;snarf-sexp&lt;/span&gt;
      (&lt;span style=&quot;color:
      #6ae4b9;&quot;&gt;&amp;amp;optional&lt;/span&gt; delete)
      &lt;span style=&quot;color: #b0d6f5;&quot;&gt;&quot;Snarf the
      contents between delimiters at point.&lt;/span&gt;
      &lt;span style=&quot;color: #b0d6f5;&quot;&gt;Optional interactive
      prefix arg deletes it.&quot;&lt;/span&gt;
      (&lt;span style=&quot;color:
      #b6a0ff;&quot;&gt;interactive&lt;/span&gt; &lt;span
      style=&quot;color: #79a8ff;&quot;&gt;&quot;P&quot;&lt;/span&gt;)
      (&lt;span style=&quot;color: #b6a0ff;&quot;&gt;let&lt;/span&gt;
      ((orig (point))
      (pair nil)
      (pairs &lt;span style=&quot;color: #a8a8a8;&quot;&gt;;;;
      &lt;/span&gt;&lt;span style=&quot;color: #a8a8a8;&quot;&gt;We keep
      predefined pairs for usability:&lt;/span&gt;
      &#39;((?&amp;lt; ?&amp;gt;)
      (?\[ ?\])
      (?\( ?\))
      (?{ ?})
      (?\&quot; ?\&quot;)
      (?&#39; ?&#39;)
      (?` ?&#39;)
      (?| ?|)
      (?* ?*)
      (?/ ?/)
      (?- ?-)
      (?_ ?_)
      (?~ ?~)))
      (char (char-after))
      (stab nil))
      (&lt;span style=&quot;color: #b6a0ff;&quot;&gt;setq&lt;/span&gt;
      pair &lt;span style=&quot;color: #a8a8a8;&quot;&gt;;;;
      &lt;/span&gt;&lt;span style=&quot;color: #a8a8a8;&quot;&gt;But we
      read a close delimiter  for the general case&lt;/span&gt;
      (&lt;span style=&quot;color: #b6a0ff;&quot;&gt;or&lt;/span&gt; (assq
      char pairs) &lt;span style=&quot;color: #a8a8a8;&quot;&gt;;;;
      &lt;/span&gt;&lt;span style=&quot;color:
      #a8a8a8;&quot;&gt;Predefined delimiter&lt;/span&gt;
      (list char (read-char &lt;span style=&quot;color:
      #79a8ff;&quot;&gt;&quot;Close Delimiter: &quot;&lt;/span&gt;))))
      &lt;span style=&quot;color: #a8a8a8;&quot;&gt;;;;
      &lt;/span&gt;&lt;span style=&quot;color:
      #a8a8a8;&quot;&gt;Generality!&lt;/span&gt;
      (&lt;span style=&quot;color: #b6a0ff;&quot;&gt;setq&lt;/span&gt;
      stab (copy-syntax-table))
      (&lt;span style=&quot;color:
      #b6a0ff;&quot;&gt;with-syntax-table&lt;/span&gt; stab
      (&lt;span style=&quot;color: #b6a0ff;&quot;&gt;cond&lt;/span&gt;
      ((= (cl-first pair) (cl-second pair))
      (modify-syntax-entry (cl-first pair) &lt;span style=&quot;color:
      #79a8ff;&quot;&gt;&quot;\&quot;&quot;&lt;/span&gt; ) 
      (modify-syntax-entry (cl-second pair) &lt;span style=&quot;color:
      #79a8ff;&quot;&gt;&quot;\&quot;&quot;&lt;/span&gt; ))
      (t
      (modify-syntax-entry (cl-first pair) &lt;span style=&quot;color:
      #79a8ff;&quot;&gt;&quot;(&quot;&lt;/span&gt;)
      (modify-syntax-entry (cl-second pair) &lt;span style=&quot;color:
      #79a8ff;&quot;&gt;&quot;)&quot;&lt;/span&gt;)))
      (&lt;span style=&quot;color:
      #b6a0ff;&quot;&gt;save-excursion&lt;/span&gt;
      (forward-sexp)
      (&lt;span style=&quot;color: #b6a0ff;&quot;&gt;cond&lt;/span&gt;
      (delete
      (kill-region (1+ orig) (1- (point))))
      (t (kill-ring-save (1+ orig) (1- (point)))))))))
      &lt;/pre&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      
      &lt;div id=&quot;outline-container-org467ac84&quot;
      class=&quot;outline-2&quot;&gt;
      &lt;h2 id=&quot;org467ac84&quot;&gt;&lt;span
      class=&quot;section-number-2&quot;&gt;3&lt;/span&gt; Key
      Takeaways&lt;/h2&gt;
      &lt;div class=&quot;outline-text-2&quot; id=&quot;text-3&quot;&gt;
      &lt;ol class=&quot;org-ol&quot;&gt;
      &lt;li&gt;The generalized implementation no longer throws an error
      if point
      is not on a pre-defined delimiter.&lt;/li&gt;
      &lt;li&gt;Instead, it generalizes the implementation to read the
      close
      delimiter from the keyboard if char at point is not in the
      pre-defined list.&lt;/li&gt;
      &lt;li&gt;We could generalize further by entirely dropping the
      pre-defined
      delimiters, but that would hurt usability in the common case where
      the user would always  have to specify the close
      delimiter.&lt;/li&gt;
      &lt;li&gt;Note that usability here is not merely to reduce a
      keystroke;
      it&#39;s more to reduce the cognitive load on the user with respect
      to having to &lt;i&gt;think&lt;/i&gt; about the close delimiter in
      the common
      case.&lt;/li&gt;
      &lt;/ol&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
    </content>
    <link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/20280042/posts/default/6263923850603207795'/>
    <link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/20280042/posts/default/6263923850603207795'/>
    <link rel='alternate' type='text/html' href='https://emacspeak.blogspot.com/2021/09/generalize-snarf-tool-how-general-can.html' title='Generalize Snarf Tool: How The General Can Be Simpler Than The Specific'/>
    <author>
      <name>T. V. Raman</name><uri>
        http://www.blogger.com/profile/03589687652590194428
      </uri>
      <email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='https://img1.blogblog.com/img/b16-rounded.gif'/>
    </author>
  </entry>
  <entry>
    <id>tag:blogger.com,1999:blog-20280042.post-3089333105276688605</id><published>
      2021-09-18T09:46:00.001-07:00
    </published>
    <updated>2021-09-18T09:46:30.411-07:00</updated><title type='text'>
      Snarfing String Within Delimiters  With One Defun
    </title>
    <content type='html'>&lt;div id=&quot;content&quot;&gt;
      &lt;h1 class=&quot;title&quot;&gt;Snarfing String Within Delimiters 
      With One Defun&lt;/h1&gt;
      &lt;div id=&quot;outline-container-org86e644c&quot;
      class=&quot;outline-2&quot;&gt;
      &lt;h2 id=&quot;org86e644c&quot;&gt;&lt;span
      class=&quot;section-number-2&quot;&gt;1&lt;/span&gt; Executive
      Summary&lt;/h2&gt;
      &lt;div class=&quot;outline-text-2&quot; id=&quot;text-1&quot;&gt;
      &lt;p&gt;
      I found that  I frequently needed to snarf a string enclosed within
      delimiters, e.g., URLs in email messages &lt;span
      class=&quot;underline&quot;&gt;&amp;lt;url&amp;gt;&lt;/span&gt;,
      bolded, italics and other styled text in org-mode etc. I first tried
      package &lt;span class=&quot;underline&quot;&gt;ciel&lt;/span&gt;
      but found that it did not handle all the delimiters I
      wanted. However looking into it further revealed that emacs had all
      the tools needed to reduce the task to a single
      &lt;b&gt;defun&lt;/b&gt;!
      &lt;/p&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      
      &lt;div id=&quot;outline-container-org56f5525&quot;
      class=&quot;outline-2&quot;&gt;
      &lt;h2 id=&quot;org56f5525&quot;&gt;&lt;span
      class=&quot;section-number-2&quot;&gt;2&lt;/span&gt; The
      Solution&lt;/h2&gt;
      &lt;div class=&quot;outline-text-2&quot; id=&quot;text-2&quot;&gt;
      &lt;p&gt;
      Here is the solution I implemented  at
      &lt;a
      
      href=&quot;https://github.com/tvraman/emacspeak/blob/master/lisp/emacspeak-wizards.el#L3089&quot;&gt;emacspeak-wizards-snarf-sexp&lt;/a&gt;. invoking this command with  point on
      the opening delimiter  snarfs the enclosed string into the
      kill-ring; an optional prefix arg clears it as well.
      The code below is the same as in the Emacspeak project, but with
      emacspeak-specific calls removed:
      &lt;/p&gt;
      
      
      &lt;div class=&quot;org-src-container&quot;&gt;
      &lt;pre class=&quot;src src-emacs-lisp&quot;&gt;(&lt;span
      style=&quot;color: #b6a0ff;&quot;&gt;defun&lt;/span&gt; &lt;span
      style=&quot;color:
      #feacd0;&quot;&gt;snarf-sexp-contents&lt;/span&gt; (&lt;span
      style=&quot;color: #6ae4b9;&quot;&gt;&amp;amp;optional&lt;/span&gt;
      delete)
      &lt;span style=&quot;color: #b0d6f5;&quot;&gt;&quot;Snarf the
      contents between delimiters at point.&lt;/span&gt;
      &lt;span style=&quot;color: #b0d6f5;&quot;&gt;Optional interactive
      prefix arg deletes it.&quot;&lt;/span&gt;
      (&lt;span style=&quot;color:
      #b6a0ff;&quot;&gt;interactive&lt;/span&gt; &lt;span
      style=&quot;color: #79a8ff;&quot;&gt;&quot;P&quot;&lt;/span&gt;)
      (&lt;span style=&quot;color: #b6a0ff;&quot;&gt;let&lt;/span&gt;
      ((orig (point))
      (pair nil)
      (pairs &lt;span style=&quot;color: #a8a8a8;&quot;&gt;;;;
      &lt;/span&gt;&lt;span style=&quot;color: #a8a8a8;&quot;&gt;The
      delimiter pairs:&lt;/span&gt;
      &#39;((?&amp;lt; ?&amp;gt;)
      (?\[ ?\])
      (?\( ?\))
      (?{ ?})
      (?\&quot; ?\&quot;)
      (?&#39; ?&#39;)
      (?` ?&#39;)
      (?| ?|)
      (?* ?*)
      (?/ ?/)
      (?- ?-)
      (?_ ?_)
      (?~ ?~)))
      (char (char-after))
      (stab nil)) &lt;span style=&quot;color: #a8a8a8;&quot;&gt;;;;
      &lt;/span&gt;&lt;span style=&quot;color: #a8a8a8;&quot;&gt;Syntax
      table we  use&lt;/span&gt;
      (&lt;span style=&quot;color: #b6a0ff;&quot;&gt;unless&lt;/span&gt;
      (&lt;span style=&quot;color: #b6a0ff;&quot;&gt;setq&lt;/span&gt;
      pair (assoc char pairs)) &lt;span style=&quot;color:
      #a8a8a8;&quot;&gt;;;; &lt;/span&gt;&lt;span style=&quot;color:
      #a8a8a8;&quot;&gt;Not on a delimiter &lt;/span&gt;
      (&lt;span style=&quot;color: #dbbe5f;&quot;&gt;error&lt;/span&gt;
      &lt;span style=&quot;color: #79a8ff;&quot;&gt;&quot;Point is not on
      a supported delimiter&quot;&lt;/span&gt;))
      (&lt;span style=&quot;color: #b6a0ff;&quot;&gt;setq&lt;/span&gt;
      stab (copy-syntax-table))
      (&lt;span style=&quot;color:
      #b6a0ff;&quot;&gt;with-syntax-table&lt;/span&gt; stab
      (&lt;span style=&quot;color: #b6a0ff;&quot;&gt;cond&lt;/span&gt;
      ((= (cl-first pair) (cl-second pair)) &lt;span style=&quot;color:
      #a8a8a8;&quot;&gt;;;;&lt;/span&gt;&lt;span style=&quot;color:
      #a8a8a8;&quot;&gt;Like quotes&lt;/span&gt;
      (modify-syntax-entry (cl-first pair) &lt;span style=&quot;color:
      #79a8ff;&quot;&gt;&quot;\&quot;&quot;&lt;/span&gt; ) 
      (modify-syntax-entry (cl-second pair) &lt;span style=&quot;color:
      #79a8ff;&quot;&gt;&quot;\&quot;&quot;&lt;/span&gt; ))
      (t&lt;span style=&quot;color: #a8a8a8;&quot;&gt;;;;
      &lt;/span&gt;&lt;span style=&quot;color: #a8a8a8;&quot;&gt;Like
      parens &lt;/span&gt;
      (modify-syntax-entry (cl-first pair) &lt;span style=&quot;color:
      #79a8ff;&quot;&gt;&quot;(&quot;&lt;/span&gt;)
      (modify-syntax-entry (cl-second pair) &lt;span style=&quot;color:
      #79a8ff;&quot;&gt;&quot;)&quot;&lt;/span&gt;)))
      (&lt;span style=&quot;color:
      #b6a0ff;&quot;&gt;save-excursion&lt;/span&gt;&lt;span
      style=&quot;color: #a8a8a8;&quot;&gt;;;; &lt;/span&gt;&lt;span
      style=&quot;color: #a8a8a8;&quot;&gt;We have our sexp &lt;/span&gt;
      (forward-sexp) &lt;span style=&quot;color: #a8a8a8;&quot;&gt;;;;
      &lt;/span&gt;&lt;span style=&quot;color: #a8a8a8;&quot;&gt;Will
      error out if delims dont match&lt;/span&gt;
      (&lt;span style=&quot;color: #b6a0ff;&quot;&gt;cond&lt;/span&gt;
      (delete &lt;span style=&quot;color: #a8a8a8;&quot;&gt;;;;
      &lt;/span&gt;&lt;span style=&quot;color: #a8a8a8;&quot;&gt;Clear
      sexp contents &lt;/span&gt;
      (kill-region (1+ orig) (1- (point))))
      (t &lt;span style=&quot;color: #a8a8a8;&quot;&gt;;;;
      &lt;/span&gt;&lt;span style=&quot;color: #a8a8a8;&quot;&gt;Copy sexp
      contents&lt;/span&gt;
      (kill-ring-save (1+ orig) (1- (point)))))))))
      
      &lt;/pre&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      
      
      &lt;div id=&quot;outline-container-org828c705&quot;
      class=&quot;outline-3&quot;&gt;
      &lt;h3 id=&quot;org828c705&quot;&gt;&lt;span
      class=&quot;section-number-3&quot;&gt;2.1&lt;/span&gt; Key
      Take-Aways&lt;/h3&gt;
      &lt;div class=&quot;outline-text-3&quot; id=&quot;text-2-1&quot;&gt;
      &lt;ul class=&quot;org-ul&quot;&gt;
      &lt;li&gt;S-expressions are a key Emacs concept with extensive
      built-in support.&lt;/li&gt;
      &lt;li&gt;S-expressions are determined by matching
      delimiters.&lt;/li&gt;
      &lt;li&gt;Delimiters are defined by the syntax-table in
      effect.&lt;/li&gt;
      &lt;li&gt;Emacs-lisp primitives let us define and manipulate
      temporary syntax-tables.&lt;/li&gt;
      &lt;li&gt;Putting it all together, the underlying task of snarfing
      the
      contents within a pair of delimiters reduces to a few calls to
      the underlying primitives.&lt;/li&gt;
      &lt;/ul&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
    </content>
    <link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/20280042/posts/default/3089333105276688605'/>
    <link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/20280042/posts/default/3089333105276688605'/>
    <link rel='alternate' type='text/html' href='https://emacspeak.blogspot.com/2021/09/snarfing-string-within-delimiters-with.html' title='Snarfing String Within Delimiters  With One Defun'/>
    <author>
      <name>T. V. Raman</name><uri>
        http://www.blogger.com/profile/03589687652590194428
      </uri>
      <email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='https://img1.blogblog.com/img/b16-rounded.gif'/>
    </author>
  </entry>
  <entry>
    <id>tag:blogger.com,1999:blog-20280042.post-6307300043551934554</id><published>
      2021-08-01T09:39:00.002-07:00
    </published>
    <updated>2021-08-01T09:39:57.679-07:00</updated><title type='text'>
      Contextual Context Switching For An Efficient Workflow
    </title>
    <content type='html'>&lt;div id=&quot;content&quot;&gt;
      &lt;h1 class=&quot;title&quot;&gt;Contextual Context Switching For
      An Efficient Workflow&lt;/h1&gt;
      &lt;div id=&quot;outline-container-org8f9276d&quot;
      class=&quot;outline-2&quot;&gt;
      &lt;h2 id=&quot;org8f9276d&quot;&gt;&lt;span
      class=&quot;section-number-2&quot;&gt;1&lt;/span&gt; Executive
      Summary&lt;/h2&gt;
      &lt;div class=&quot;outline-text-2&quot; id=&quot;text-1&quot;&gt;
      &lt;p&gt;
      Context switching in an Emacs workflow comes down to switching
      buffers &amp;#x2014; and  Emacs provides a large number of
      built-ins and extensions packages for &lt;i&gt;switching
      buffers&lt;/i&gt;. One can
      put together numerous workflows by picking among these to make
      context switching &lt;i&gt;contextual&lt;/i&gt; &amp;#x2014; using
      the most appropriate
      workflow can lead to  being able to focus much better on the core
      task of creating, editing, reviewing and publishing all forms of
      content ranging from research papers and presentations to Open
      Source Software.
      &lt;/p&gt;
      
      &lt;p&gt;
      This article summarizes my present workflow &amp;#x2014; it&#39;s
      entirely
      keyboard driven and optimized for
      an eyes-free workflow.
      &lt;/p&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      
      &lt;div id=&quot;outline-container-orga0534fb&quot;
      class=&quot;outline-2&quot;&gt;
      &lt;h2 id=&quot;orga0534fb&quot;&gt;&lt;span
      class=&quot;section-number-2&quot;&gt;2&lt;/span&gt; Where Does
      &lt;i&gt;Context&lt;/i&gt; Come From?&lt;/h2&gt;
      &lt;div class=&quot;outline-text-2&quot; id=&quot;text-2&quot;&gt;
      &lt;p&gt;
      Context as used in this article can be traced back to the current
      task at
      hand &amp;#x2014; here are some illustrative examples:
      &lt;/p&gt;
      
      &lt;ol class=&quot;org-ol&quot;&gt;
      &lt;li&gt;Editing a set of related files. (.c, .h)&lt;/li&gt;
      &lt;li&gt;Switching among a collection of chat buffers.
      (major-mode)&lt;/li&gt;
      &lt;li&gt;Switching among a collection of mail folders.
      (major-mode)&lt;/li&gt;
      &lt;li&gt;Switching among a collection of open Web pages.
      (major-mode)&lt;/li&gt;
      &lt;li&gt;Switching among a &lt;i&gt;small&lt;/i&gt; number of
      recently used buffers. (recency)&lt;/li&gt;
      &lt;li&gt;Switching among buffers in the same project
      (project)&lt;/li&gt;
      &lt;li&gt;Switching between project-specific shells and buffers.
      (project)&lt;/li&gt;
      &lt;/ol&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      
      
      &lt;div id=&quot;outline-container-orgdd9e202&quot;
      class=&quot;outline-2&quot;&gt;
      &lt;h2 id=&quot;orgdd9e202&quot;&gt;&lt;span
      class=&quot;section-number-2&quot;&gt;3&lt;/span&gt; Building Blocks
      For Context Switching&lt;/h2&gt;
      &lt;div class=&quot;outline-text-2&quot; id=&quot;text-3&quot;&gt;
      &lt;p&gt;
      Here are some of the building blocks I use to construct workflows
      that
      meet the use-cases enumerated in the previous section. Many of these
      are built into Emacs; some come from extra packages and a few are
      implemented in Emacspeak to fill the gaps.  See the related article
      &lt;a
      
      href=&quot;https://emacspeak.blogspot.com/2018/06/effective-suggest-and-complete-in-eyes.html&quot;&gt;Search, Input, Filter, Target (SIFT)&lt;/a&gt; interaction described in a
      previous article for a more detailed explanation or properties that
      characterize effective eyes-free interaction.
      &lt;/p&gt;
      
      &lt;ol class=&quot;org-ol&quot;&gt;
      &lt;li&gt;Built-in Command &lt;code&gt;next-buffer&lt;/code&gt; and
      &lt;code&gt;previous-buffer&lt;/code&gt; bound to
      &lt;code&gt;hyper-,&lt;/code&gt; and
      &lt;code&gt;hyper-.&lt;/code&gt;.&lt;/li&gt;
      &lt;li&gt;Builtin Command ~ &lt;code&gt;other-window&lt;/code&gt;
      bound to &lt;code&gt;C-x o&lt;/code&gt;.&lt;/li&gt;
      &lt;li&gt;&lt;a
      
      href=&quot;https://github.com/tvraman/emacspeak/blob/master/lisp/emacspeak-wizards.el#L1621&quot;&gt;Emacspeak Commands&lt;/a&gt;   &lt;code&gt;emacspeak-wizards-cycle-to-next-buffer&lt;/code&gt; and
      &lt;code&gt;emacspeak-wizards-cycle-to-previous-buffer&lt;/code&gt;
      bound to  &lt;code&gt;Alt-n&lt;/code&gt; and
      &lt;code&gt;Alt-p&lt;/code&gt;.&lt;/li&gt;
      &lt;li&gt;&lt;a
      
      href=&quot;https://github.com/tvraman/emacspeak/blob/master/lisp/emacspeak-wizards.el#L729&quot;&gt;Emacspeak Command&lt;/a&gt; &lt;code&gt;emacspeak-wizards-shell-toggle&lt;/code&gt; bound to &lt;code&gt;Super-,&lt;/code&gt;.&lt;/li&gt;
      &lt;li&gt;&lt;a
      
      href=&quot;https://github.com/tvraman/emacspeak/blob/master/lisp/emacspeak-wizards.el#L1457&quot;&gt;Emacspeak Command&lt;/a&gt; &lt;code&gt;emacspeak-wizards-shell-by-key&lt;/code&gt; bound to &lt;code&gt;C-c [1-9]&lt;/code&gt;.&lt;/li&gt;
      &lt;/ol&gt;
      &lt;/div&gt;
      &lt;div id=&quot;outline-container-org903a098&quot;
      class=&quot;outline-3&quot;&gt;
      &lt;h3 id=&quot;org903a098&quot;&gt;&lt;span
      class=&quot;section-number-3&quot;&gt;3.1&lt;/span&gt; Things To
      Note&lt;/h3&gt;
      &lt;div class=&quot;outline-text-3&quot; id=&quot;text-3-1&quot;&gt;
      &lt;ol class=&quot;org-ol&quot;&gt;
      &lt;li&gt;Notice that many of these commands come in pairs and use
      key-bindings that also pair-up with respect to muscle memory; over
      time I have found this type of pairing to be essential for them to
      become part of one&#39;s daily habit.&lt;/li&gt;
      &lt;li&gt;And when these task-specific commands dont get you the
      buffer
      you want with one or two keystrokes, one can always fallback to
      &lt;code&gt;switch-to-buffer&lt;/code&gt;.&lt;/li&gt;
      &lt;li&gt;Built-in Command &lt;code&gt;switch-to-buffer&lt;/code&gt;
      bound to  &lt;code&gt;C-x b&lt;/code&gt; which in my
      environment maps to  &lt;code&gt;ido-switch-buffer&lt;/code&gt; with
      fuzzy completion.&lt;/li&gt;
      &lt;/ol&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      
      
      &lt;div id=&quot;outline-container-org6e43053&quot;
      class=&quot;outline-3&quot;&gt;
      &lt;h3 id=&quot;org6e43053&quot;&gt;&lt;span
      class=&quot;section-number-3&quot;&gt;3.2&lt;/span&gt; Related
      Packages&lt;/h3&gt;
      &lt;div class=&quot;outline-text-3&quot; id=&quot;text-3-2&quot;&gt;
      &lt;p&gt;
      There are of course many alternatives to the building blocks above,
      here is a non-exhaustive list:
      &lt;/p&gt;
      
      &lt;ul class=&quot;org-ul&quot;&gt;
      &lt;li&gt;Package &lt;code&gt;helm&lt;/code&gt; with
      &lt;code&gt;ivy&lt;/code&gt;, &lt;code&gt;counsel&lt;/code&gt; and
      friends.&lt;/li&gt;
      &lt;li&gt;Package &lt;code&gt;selectrum&lt;/code&gt;.&lt;/li&gt;
      &lt;li&gt;&lt;p&gt;
      Additionally organizing  one&#39;s workspace using &lt;code&gt;Emacs
      Frames&lt;/code&gt; with
      each frame dedicated to tasks like email &amp;#x2014; visual
      workspaces.
      &lt;/p&gt;
      
      &lt;p&gt;
      In general, I&#39;ve not found any of the above adding much in the
      context of eyes-free interaction.
      &lt;/p&gt;&lt;/li&gt;
      &lt;/ul&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      
      &lt;div id=&quot;outline-container-org7e4aab2&quot;
      class=&quot;outline-2&quot;&gt;
      &lt;h2 id=&quot;org7e4aab2&quot;&gt;&lt;span
      class=&quot;section-number-2&quot;&gt;4&lt;/span&gt;
      Conclusion&lt;/h2&gt;
      &lt;div class=&quot;outline-text-2&quot; id=&quot;text-4&quot;&gt;
      &lt;p&gt;
      Emacs has a large number of facilities that lend themselves to
      multiple workflows. Investing some time in putting together
      workflows that suit one&#39;s needs has a large pay-back over time.
      &lt;/p&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;			
    </content>
    <link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/20280042/posts/default/6307300043551934554'/>
    <link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/20280042/posts/default/6307300043551934554'/>
    <link rel='alternate' type='text/html' href='https://emacspeak.blogspot.com/2021/08/contextual-context-switching-for.html' title='Contextual Context Switching For An Efficient Workflow'/>
    <author>
      <name>T. V. Raman</name><uri>
        http://www.blogger.com/profile/03589687652590194428
      </uri>
      <email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='https://img1.blogblog.com/img/b16-rounded.gif'/>
    </author>
  </entry>
  <entry>
    <id>tag:blogger.com,1999:blog-20280042.post-3408061818965563521</id><published>
      2021-05-02T11:29:00.000-07:00
    </published>
    <updated>2021-05-02T11:29:12.692-07:00</updated><title type='text'>
      Announcing Emacspeak 54.0 (EZDog)
    </title>
    <content type='html'>&lt;div id=&quot;content&quot;&gt;
      &lt;h1 class=&quot;title&quot;&gt;Announcing Emacspeak
      54.0—EZDog!&lt;/h1&gt;
      &lt;p&gt;
      The enjoyment of one&#39;s tools is an essential ingredient of
      successful work. &amp;#x2013; Donald E. Knuth
      &lt;/p&gt;
      
      &lt;div id=&quot;outline-container-org3888897&quot;
      class=&quot;outline-2&quot;&gt;
      &lt;h2 id=&quot;org3888897&quot;&gt;&lt;span
      class=&quot;section-number-2&quot;&gt;1&lt;/span&gt; For Immediate
      Release:&lt;/h2&gt;
      &lt;div class=&quot;outline-text-2&quot; id=&quot;text-1&quot;&gt;
      &lt;p&gt;
      San Jose, CA, (May 3, 2021)
      &lt;/p&gt;
      &lt;/div&gt;
      
      &lt;div id=&quot;outline-container-orga80b37f&quot;
      class=&quot;outline-3&quot;&gt;
      &lt;h3 id=&quot;orga80b37f&quot;&gt;&lt;span
      class=&quot;section-number-3&quot;&gt;1.1&lt;/span&gt; Emacspeak
      54.0 (EZDog)  Unleashed!  🦮&lt;/h3&gt;
      &lt;div class=&quot;outline-text-3&quot; id=&quot;text-1-1&quot;&gt;
      &lt;p&gt;
      &amp;#x2014; Making Accessible Computing EZ Again!
      &lt;/p&gt;
      
      &lt;p&gt;
      Advancing Accessibility In The Age Of User-Aware Interfaces
      &amp;#x2014; Zero
      cost of Ownership makes priceless software Universally affordable!
      &lt;/p&gt;
      
      &lt;p&gt;
      Emacspeak Inc (NASDOG: ESPK) &amp;#x2014; &lt;a
      
      href=&quot;http://github.com/tvraman/emacspeak&quot;&gt;http://github.com/tvraman/emacspeak&lt;/a&gt;
      announces  immediate world-wide availability of &lt;a
      
      href=&quot;https://github.com/tvraman/emacspeak/releases/download/54.0/emacspeak-53.0.tar.bz2&quot;&gt;Emacspeak 54.0&lt;/a&gt;
      (EZDog) 🦮 &amp;#x2014; a powerful audio desktop that leverages
      today&#39;s
      evolving Data, Social and Assistant-Oriented Internet cloud to
      enableworking efficiently and effectively from anywhere!
      &lt;/p&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      
      &lt;div id=&quot;outline-container-org04cd7a8&quot;
      class=&quot;outline-2&quot;&gt;
      &lt;h2 id=&quot;org04cd7a8&quot;&gt;&lt;span
      class=&quot;section-number-2&quot;&gt;2&lt;/span&gt; Investors
      Note:&lt;/h2&gt;
      &lt;div class=&quot;outline-text-2&quot; id=&quot;text-2&quot;&gt;
      &lt;p&gt;
      With several prominent tweeters expanding coverage of &lt;span
      class=&quot;underline&quot;&gt;#emacspeak&lt;/span&gt;,
      NASDOG: ESPK has now been consistently trading over the social net
      atlevels close to that once attained by DogCom high-fliers—and as
      of
      May  2021 is trading at levels close to that achieved by once
      better known stocks in the tech sector.
      &lt;/p&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      
      &lt;div id=&quot;outline-container-org3115cb5&quot;
      class=&quot;outline-2&quot;&gt;
      &lt;h2 id=&quot;org3115cb5&quot;&gt;&lt;span
      class=&quot;section-number-2&quot;&gt;3&lt;/span&gt; What Is
      It?&lt;/h2&gt;
      &lt;div class=&quot;outline-text-2&quot; id=&quot;text-3&quot;&gt;
      &lt;p&gt;
      Emacspeak is a fully functional audio desktop that provides complete
      eyes-free access to all major 32 and 64 bit operating environments.
      By
      seamlessly blending live access to all aspects of the Internet such
      as
      ubiquitous assistance, Web-surfing, blogging, remote software
      development, social computing and electronic messaging into the
      audiodesktop, Emacspeak enables speech access to local and remote
      information with a consistent and well-integrated user interface. A
      rich suite of task-oriented tools provides efficient speech-enabled
      access to the evolving assistant-oriented social Internet cloud.
      &lt;/p&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      
      &lt;div id=&quot;outline-container-orged75ec3&quot;
      class=&quot;outline-2&quot;&gt;
      &lt;h2 id=&quot;orged75ec3&quot;&gt;&lt;span
      class=&quot;section-number-2&quot;&gt;4&lt;/span&gt; Major
      Enhancements:&lt;/h2&gt;
      &lt;div class=&quot;outline-text-2&quot; id=&quot;text-4&quot;&gt;
      &lt;ol class=&quot;org-ol&quot;&gt;
      &lt;li&gt;Faster Startup  🛱&lt;/li&gt;
      &lt;li&gt;MP3 Files In Dired 🎹&lt;/li&gt;
      &lt;li&gt;Dynamic playlist support with m-player  🎶&lt;/li&gt;
      &lt;li&gt;Gopher And Gemini ♊&lt;/li&gt;
      &lt;li&gt;Emacs 28 with native compilation   🚅&lt;/li&gt;
      &lt;li&gt;Updated Soundscapes  🐦&lt;/li&gt;
      &lt;li&gt;Updated wizards🧙&lt;/li&gt;
      &lt;li&gt;Updated URL templates  🕷&lt;/li&gt;
      &lt;li&gt;Capitalization And AllCaps   💼&lt;/li&gt;
      &lt;li&gt;&lt;p&gt;
      Updated keymaps and keybindings ⌨
      &lt;/p&gt;
      
      &lt;p&gt;
      — And a lot more than will fit this margin. … 🗞
      &lt;/p&gt;&lt;/li&gt;
      &lt;/ol&gt;
      
      
      &lt;p&gt;
      Note: This version &lt;b&gt;requires&lt;/b&gt; emacs-27.1 or later. 
      &lt;/p&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      
      &lt;div id=&quot;outline-container-orgd0c7f10&quot;
      class=&quot;outline-2&quot;&gt;
      &lt;h2 id=&quot;orgd0c7f10&quot;&gt;&lt;span
      class=&quot;section-number-2&quot;&gt;5&lt;/span&gt; Establishing
      Liberty, Equality And Freedom:&lt;/h2&gt;
      &lt;div class=&quot;outline-text-2&quot; id=&quot;text-5&quot;&gt;
      &lt;p&gt;
      Never a toy system, Emacspeak is voluntarily bundled with all
      major Linux distributions. Though designed to be modular,
      distributors have freely chosen to bundle the fully integrated
      system without any undue pressure—a documented success for
      the integrated innovation embodied by Emacspeak. As the system
      evolves, both upgrades and downgrades continue to be available at
      the same zero-cost to all users. The integrity of the Emacspeak
      codebase is ensured by the reliable and secure Linux platform
      and the underlying GIT versioning software used to develop and
      distribute the system.
      &lt;/p&gt;
      
      &lt;p&gt;
      Extensive studies have shown that thanks to these features, users
      consider Emacspeak to be absolutely priceless. Thanks to this
      wide-spread user demand, the present version remains   priceless
      as ever—it is being made available at the same zero-cost as
      previous releases.
      &lt;/p&gt;
      
      &lt;p&gt;
      At the same time, Emacspeak continues to innovate in the area of
      eyes-free Assistance and social interaction and carries forward the
      well-established Open Source tradition of introducing user interface
      features that eventually show up in luser environments.
      &lt;/p&gt;
      
      &lt;p&gt;
      On this theme, when once challenged by a proponent of a crash-prone
      but well-marketed mousetrap with the assertion &quot;Emacs is a
      system from
      the 70&#39;s&quot;, the creator of Emacspeak evinced surprise at the
      unusual
      candor manifest in the assertion that it would take popular
      idiot-proven interfaces until the year 2070 to catch up to where the
      Emacspeak audio desktop is today. Industry experts welcomed this
      refreshing breath of Courage Certainty and Clarity (CCC) at a time
      when users are reeling from the Fear Uncertainty and Doubt (FUD)
      unleashed by complex software systems backed by even more convoluted
      press releases.
      &lt;/p&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      
      &lt;div id=&quot;outline-container-org21dc866&quot;
      class=&quot;outline-2&quot;&gt;
      &lt;h2 id=&quot;org21dc866&quot;&gt;&lt;span
      class=&quot;section-number-2&quot;&gt;6&lt;/span&gt; Independent
      Test Results:&lt;/h2&gt;
      &lt;div class=&quot;outline-text-2&quot; id=&quot;text-6&quot;&gt;
      &lt;p&gt;
      Independent test results have proven that unlike some modern (and
      not so modern) software, Emacspeak can be safely uninstalled without
      adversely affecting the continued performance of the computer. These
      same tests also revealed that once uninstalled, the user stopped
      functioning altogether. Speaking with Aster Labrador, the creator of
      Emacspeak once pointed out that these results re-emphasize the
      user-centric design of Emacspeak; “It is the user &amp;#x2014; and
      not the
      computer&amp;#x2013; that stops functioning when Emacspeak is
      uninstalled!”.
      &lt;/p&gt;
      &lt;/div&gt;
      
      &lt;div id=&quot;outline-container-org40be5bf&quot;
      class=&quot;outline-3&quot;&gt;
      &lt;h3 id=&quot;org40be5bf&quot;&gt;&lt;span
      class=&quot;section-number-3&quot;&gt;6.1&lt;/span&gt; Note from
      Aster,Bubbles and Tilden:&lt;/h3&gt;
      &lt;div class=&quot;outline-text-3&quot; id=&quot;text-6-1&quot;&gt;
      &lt;p&gt;
      UnDoctored Videos Inc. is looking for volunteers to star in a
      video demonstrating such complete user failure.
      &lt;/p&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      
      &lt;div id=&quot;outline-container-org945eccf&quot;
      class=&quot;outline-2&quot;&gt;
      &lt;h2 id=&quot;org945eccf&quot;&gt;&lt;span
      class=&quot;section-number-2&quot;&gt;7&lt;/span&gt; Obtaining
      Emacspeak:&lt;/h2&gt;
      &lt;div class=&quot;outline-text-2&quot; id=&quot;text-7&quot;&gt;
      &lt;p&gt;
      Emacspeak can be downloaded from GitHub &amp;#x2014; see
      &lt;a
      
      href=&quot;https://github.com/tvraman/emacspeak&quot;&gt;https://github.com/tvraman/emacspeak&lt;/a&gt; you can visit Emacspeak on the
      WWW at &lt;a
      
      href=&quot;http://emacspeak.sf.net&quot;&gt;http://emacspeak.sf.net&lt;/a&gt;. You can subscribe to the emacspeak
      mailing list — &lt;a
      
      href=&quot;http://mail.emacspeak.org&quot;&gt;emacspeak@emacspeak.org&lt;/a&gt;.  The &lt;a href=&quot;http://emacspeak.blogspot.com&quot;&gt;Emacspeak Blog&lt;/a&gt; is a good
      source for news about recent enhancements and how to use them.
      &lt;/p&gt;
      
      &lt;p&gt;
      The latest development snapshot of Emacspeak is always available at
      &lt;a
      
      href=&quot;https://github.com/tvraman/emacspeak&quot;&gt;GitHub&lt;/a&gt;.
      &lt;/p&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      
      &lt;div id=&quot;outline-container-orgd258e48&quot;
      class=&quot;outline-2&quot;&gt;
      &lt;h2 id=&quot;orgd258e48&quot;&gt;&lt;span
      class=&quot;section-number-2&quot;&gt;8&lt;/span&gt;
      History:&lt;/h2&gt;
      &lt;div class=&quot;outline-text-2&quot; id=&quot;text-8&quot;&gt;
      &lt;ul class=&quot;org-ul&quot;&gt;
      &lt;li&gt;Emacspeak 54.0 (EZDog) learns to take it easy from
      Tilden.&lt;/li&gt;
      &lt;li&gt;Emacspeak 53.0 (EfficientDog)  focuses on 
      efficiency.&lt;/li&gt;
      &lt;li&gt;Emacspeak 52.0 (WorkAtHomeDog) makes working remotely a
      pleasurable experience.&lt;/li&gt;
      &lt;li&gt;Bigger and more powerful than any smart assistAnt,
      AssistDog provides&lt;/li&gt;
      &lt;/ul&gt;
      &lt;p&gt;
      instant access to the most relevant information at all times.
      &lt;/p&gt;
      &lt;ul class=&quot;org-ul&quot;&gt;
      &lt;li&gt;Emacspeak 50.0 (SageDog) embraces the wisdom of stability
      as
      opposed to rapid change and the concomitant  creation of bugs.🚭: 
      Naturally Intelligent (NI)™ at how information is spoken,
      Emacspeak&lt;/li&gt;
      &lt;/ul&gt;
      &lt;p&gt;
      is entirely free of Artificial Ingredients (AI)™.
      &lt;/p&gt;
      &lt;ul class=&quot;org-ul&quot;&gt;
      &lt;li&gt;Emacspeak 49.0 (WiseDog) leverages the wisdom gleaned from
      earlier releases to provide an enhanced  auditory
      experience.&lt;/li&gt;
      &lt;li&gt;Emacspeak 48.0  (ServiceDog) builds on earlier releases to
      provide
      continued end-user value.&lt;/li&gt;
      &lt;li&gt;Emacspeak 47.0 (GentleDog) goes the next step in being
      helpful
      while letting users learn and grow.&lt;/li&gt;
      &lt;li&gt;Emacspeak 46.0 (HelpfulDog) heralds the  coming of Smart
      Assistants.&lt;/li&gt;
      &lt;li&gt;Emacspeak 45.0 (IdealDog) is named in recognition of
      Emacs&#39;
      excellent integration with various programming language
      environments &amp;#x2014; thanks to this, Emacspeak is the IDE of
      choice
      for eyes-free software engineering.&lt;/li&gt;
      &lt;li&gt;Emacspeak 44.0 continues the steady pace of innovation on
      the
      audio desktop.&lt;/li&gt;
      &lt;li&gt;Emacspeak  43.0 brings even more end-user efficiency by
      leveraging the
      ability to spatially place multiple audio streams to provide timely
      auditory feedback.&lt;/li&gt;
      &lt;li&gt;Emacspeak 42.0 while moving to GitHub from Google Code
      continues to
      innovate in the areas of auditory user interfaces and efficient,
      light-weight Internet access.&lt;/li&gt;
      &lt;li&gt;Emacspeak 41.0 continues to improve 
      on  the desire to provide not just equal, but superior access —
      technology when correctly implemented can significantly enhance the
      human ability.&lt;/li&gt;
      &lt;li&gt;Emacspeak 40.0 goes back to Web basics by enabling
      &lt;a
      
      href=&quot;http://emacspeak.blogspot.com/2013/11/reading-web-content-efficiently.html&quot;&gt;efficient access&lt;/a&gt; to large amounts of readable Web content.&lt;/li&gt;
      &lt;li&gt;Emacspeak 39.0 continues the Emacspeak tradition of
      increasing the breadth of
      user tasks that are covered without introducing unnecessary
      bloatware.&lt;/li&gt;
      &lt;li&gt;Emacspeak 38.0 is the latest in a series of award-winning
      releases from Emacspeak Inc.&lt;/li&gt;
      &lt;li&gt;Emacspeak 37.0 continues the tradition of
      delivering robust software as reflected by its code-name.&lt;/li&gt;
      &lt;li&gt;Emacspeak 36.0 enhances the audio desktop with many new
      tools including full
      EPub support — hence the name EPubDog.&lt;/li&gt;
      &lt;li&gt;Emacspeak 35.0 is all about
      teaching a new dog old tricks — and is aptly code-named HeadDog in
      on  of our new Press/Analyst contact. emacspeak-34.0 (AKA Bubbles)
      established a new beach-head with respect to rapid task completion
      inan eyes-free environment.&lt;/li&gt;
      &lt;li&gt;Emacspeak-33.0 AKA StarDog brings
      unparalleled cloud access to the audio desktop.&lt;/li&gt;
      &lt;li&gt;Emacspeak 32.0 AKA
      LuckyDog continues to innovate via open technologies for better
      access.&lt;/li&gt;
      &lt;li&gt;Emacspeak 31.0 AKA TweetDog — adds tweeting to the
      Emacspeak
      desktop.&lt;/li&gt;
      &lt;li&gt;Emacspeak 30.0 AKA SocialDog brings the Social Web to the
      audio desktop—you cant but be social if you speak!&lt;/li&gt;
      &lt;li&gt;Emacspeak 29.0—AKAAbleDog—is a testament to the
      resilliance and innovation
      embodied by Open Source software—it would not exist without the
      thriving Emacs community that continues to ensure that Emacs remains
      one of the premier user environments despite perhaps also being one
      of
      the oldest.&lt;/li&gt;
      &lt;li&gt;Emacspeak 28.0—AKA PuppyDog—exemplifies the rapid pace
      of
      development evinced by Open Source software.&lt;/li&gt;
      &lt;li&gt;Emacspeak 27.0—AKA
      FastDog—is the latest in a sequence of upgrades that make previous
      releases obsolete and downgrades unnecessary.&lt;/li&gt;
      &lt;li&gt;Emacspeak 26—AKA
      LeadDog—continues the tradition of introducing innovative access
      solutions that are unfettered by the constraints inherent in
      traditional adaptive technologies.&lt;/li&gt;
      &lt;li&gt;Emacspeak 25 —AKA ActiveDog
      —re-activates open, unfettered access to online
      information.&lt;/li&gt;
      &lt;li&gt;Emacspeak-Alive —AKA LiveDog —enlivens open,
      unfetteredinformation access with a series of live updates that once
      again
      demonstrate the power and agility of open source software
      development.&lt;/li&gt;
      &lt;li&gt;Emacspeak 23.0 &amp;#x2014; AKA Retriever—went the extra
      mile in
      fetching full access.&lt;/li&gt;
      &lt;li&gt;Emacspeak 22.0 —AKA GuideDog —helps users
      navigate the Web more effectively than ever before.&lt;/li&gt;
      &lt;li&gt;Emacspeak 21.0
      —AKA PlayDog —continued the 
      Emacspeak tradition of relying on enhanced
      productivity to liberate users.&lt;/li&gt;
      &lt;li&gt;Emacspeak-20.0 —AKA LeapDog —continues
      the long established GNU/Emacs tradition of integrated innovation to
      create a pleasurable computing environment for eyes-free
      interaction.&lt;/li&gt;
      &lt;li&gt;emacspeak-19.0 &amp;#x2013;AKA WorkDog&amp;#x2013; is
      designed to enhance
      user productivity at work and leisure.&lt;/li&gt;
      &lt;li&gt;Emacspeak-18.0 &amp;#x2013;code named
      GoodDog&amp;#x2013; continued the Emacspeak tradition of enhancing
      user
      productivity and thereby reducing total cost of
      ownership.&lt;/li&gt;
      &lt;li&gt;Emacspeak-17.0 &amp;#x2013;code named HappyDog&amp;#x2013;
      enhances user
      productivity by exploiting today&#39;s evolving WWW
      standards.&lt;/li&gt;
      &lt;li&gt;Emacspeak-16.0 &amp;#x2013;code named
      CleverDog&amp;#x2013; the follow-up to
      SmartDog&amp;#x2013; continued the tradition of working better,
      faster,
      smarter.&lt;/li&gt;
      &lt;li&gt;Emacspeak-15.0 &amp;#x2013;code named
      SmartDog&amp;#x2013;followed up on TopDog
      as the next in a continuing  series of award-winning audio desktop
      releases from  Emacspeak Inc.&lt;/li&gt;
      &lt;li&gt;Emacspeak-14.0 &amp;#x2013;code named
      TopDog&amp;#x2013;was&lt;/li&gt;
      &lt;/ul&gt;
      &lt;p&gt;
      the first release of this millennium. 
      &lt;/p&gt;
      &lt;ul class=&quot;org-ul&quot;&gt;
      &lt;li&gt;Emacspeak-13.0 &amp;#x2013;codenamed
      YellowLab&amp;#x2013; was the closing release of the
      20th. century.&lt;/li&gt;
      &lt;li&gt;Emacspeak-12.0 &amp;#x2013;code named
      GoldenDog&amp;#x2013; began
      leveraging the evolving semantic WWW to provide task-oriented speech
      access to Webformation.&lt;/li&gt;
      &lt;li&gt;Emacspeak-11.0 &amp;#x2013;code named Aster&amp;#x2013;
      went the
      final step in making Linux a zero-cost Internet access solution for
      blind and visually impaired users.&lt;/li&gt;
      &lt;li&gt;Emacspeak-10.0 &amp;#x2013;(AKA
      Emacspeak-2000) code named WonderDog&amp;#x2013; continued the
      tradition of
      award-winning software releases designed to make eyes-free computing
      a
      productive and pleasurable experience.&lt;/li&gt;
      &lt;li&gt;Emacspeak-9.0 &amp;#x2013;(AKA
      Emacspeak 99) code named BlackLab&amp;#x2013; continued to innovate
      in the areas
      of speech interaction and interactive accessibility.&lt;/li&gt;
      &lt;li&gt;Emacspeak-8.0 &amp;#x2013;(AKA Emacspeak-98++) code named
      BlackDog&amp;#x2013; was a major upgrade to
      the speech output extension to Emacs.&lt;/li&gt;
      &lt;li&gt;Emacspeak-95 (code named Illinois) was released as
      OpenSource on
      the Internet in May 1995 as the first complete speech interface
      to UNIX workstations. The subsequent release, Emacspeak-96 (code
      named Egypt) made available in May 1996 provided significant
      enhancements to the interface. Emacspeak-97 (Tennessee) went
      further in providing a true audio desktop. Emacspeak-98
      integrated Internetworking into all aspects of the audio desktop
      to provide the first fully interactive speech-enabled
      WebTop.&lt;/li&gt;
      &lt;/ul&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      
      &lt;div id=&quot;outline-container-org9306ff5&quot;
      class=&quot;outline-2&quot;&gt;
      &lt;h2 id=&quot;org9306ff5&quot;&gt;&lt;span
      class=&quot;section-number-2&quot;&gt;9&lt;/span&gt; About
      Emacspeak:&lt;/h2&gt;
      &lt;div class=&quot;outline-text-2&quot; id=&quot;text-9&quot;&gt;
      &lt;p&gt;
      Originally based at Cornell (NY) —
      &lt;a
      
      href=&quot;http://www.cs.cornell.edu/home/raman&quot;&gt;http://www.cs.cornell.edu/home/raman&lt;/a&gt; —home to Auditory User
      Interfaces (AUI) on the WWW,  Emacspeak is now maintained on GitHub
      —&lt;a
      
      href=&quot;https://github.com/tvraman/emacspeak&quot;&gt;https://github.com/tvraman/emacspeak&lt;/a&gt;. The system is mirrored
      world-wide by an international network of software archives and
      bundled voluntarily with all major Linux distributions. On Monday,
      April 12, 1999, Emacspeak became part of the &lt;a
      
      href=&quot;http://tvraman.github.io/emacspeak/blog/smithsonian-study.html&quot;&gt;Smithsonian&#39;s Permanent
      Research Collection&lt;/a&gt; on Information Technology at the
      Smithsonian&#39;s
      National Museum of American History.
      &lt;/p&gt;
      
      &lt;p&gt;
      The Emacspeak mailing list is archived at Vassar &amp;#x2013;the
      home of the
      Emacspeak mailing list&amp;#x2013; thanks to Greg Priest-Dorman, and
      provides a
      valuable knowledge base for new users. Note that we are currently
      looking for a new home for the mailing list &amp;#x2014; stay tuned;
      in the
      meantime, the list is available via
      &lt;b&gt;nntp+news.gmane.io:gmane.emacs.emacspeak.general&lt;/b&gt;
      from within Gnus.
      &lt;/p&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      
      &lt;div id=&quot;outline-container-org80bc5fa&quot;
      class=&quot;outline-2&quot;&gt;
      &lt;h2 id=&quot;org80bc5fa&quot;&gt;&lt;span
      class=&quot;section-number-2&quot;&gt;10&lt;/span&gt; Press/Analyst
      Contact: Tilden Labrador&lt;/h2&gt;
      &lt;div class=&quot;outline-text-2&quot; id=&quot;text-10&quot;&gt;
      &lt;p&gt;
      Going forward, Tilden acknowledges his exclusive monopoly on
      setting the direction of the Emacspeak Audio Desktop (🦮) and
      promises to exercise this freedom to innovate and her resulting
      power responsibly (as before) in the interest of all dogs.
      &lt;/p&gt;
      
      &lt;p&gt;
      *About This Release:
      &lt;/p&gt;
      &lt;hr /&gt;
      
      &lt;p&gt;
      Windows-Free (WF) is a favorite battle-cry of The League Against
      Forced Fenestration (LAFF).  &amp;#x2013;see
      &lt;a
      
      href=&quot;http://www.usdoj.gov/atr/cases/f3800/msjudgex.htm&quot;&gt;http://www.usdoj.gov/atr/cases/f3800/msjudgex.htm&lt;/a&gt; for details on
      the ill-effects of Forced Fenestration.
      &lt;/p&gt;
      
      &lt;p&gt;
      CopyWrite )C( Aster, Hubbell and Tilden Labrador. All Writes
      Reserved.
      HeadDog (DM), LiveDog (DM), GoldenDog (DM), BlackDog (DM) etc., are
      Registered
      Dogmarks of Aster,  Hubbell  and Tilden Labrador.  All other dogs
      belong to
      their respective owners.
      &lt;/p&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;			
    </content>
    <link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/20280042/posts/default/3408061818965563521'/>
    <link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/20280042/posts/default/3408061818965563521'/>
    <link rel='alternate' type='text/html' href='https://emacspeak.blogspot.com/2021/05/announcing-emacspeak-540-ezdog.html' title='Announcing Emacspeak 54.0 (EZDog)'/>
    <author>
      <name>T. V. Raman</name><uri>
        http://www.blogger.com/profile/03589687652590194428
      </uri>
      <email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='https://img1.blogblog.com/img/b16-rounded.gif'/>
    </author>
  </entry>
  <entry>
    <id>tag:blogger.com,1999:blog-20280042.post-4870921173520661381</id><published>
      2020-11-21T09:28:00.004-08:00
    </published>
    <updated>2020-11-21T09:28:45.013-08:00</updated><title type='text'>
      Emacspeak 53.0 EfficientDog Unleashed!
    </title>
    <content type='html'>&lt;div id=&quot;content&quot;&gt;
      &lt;h1 class=&quot;title&quot;&gt;Announcing Emacspeak
      52.0—WorkAtHomeDog!&lt;/h1&gt;
      &lt;p&gt;
      The enjoyment of one&#39;s tools is an essential ingredient of
      successful work. &amp;#x2013; Donald E. Knuth
      &lt;/p&gt;
      
      &lt;div id=&quot;outline-container-org5a6e85f&quot;
      class=&quot;outline-2&quot;&gt;
      &lt;h2 id=&quot;org5a6e85f&quot;&gt;&lt;span
      class=&quot;section-number-2&quot;&gt;1&lt;/span&gt; For Immediate
      Release:&lt;/h2&gt;
      &lt;div class=&quot;outline-text-2&quot; id=&quot;text-1&quot;&gt;
      &lt;p&gt;
      San Jose, CA, (Nov 22, 2020)
      &lt;/p&gt;
      &lt;/div&gt;
      
      &lt;div id=&quot;outline-container-org20a78c7&quot;
      class=&quot;outline-3&quot;&gt;
      &lt;h3 id=&quot;org20a78c7&quot;&gt;&lt;span
      class=&quot;section-number-3&quot;&gt;1.1&lt;/span&gt; Emacspeak
      53.0 (EfficientDog) 🦮 Unleashed!&lt;/h3&gt;
      &lt;div class=&quot;outline-text-3&quot; id=&quot;text-1-1&quot;&gt;
      &lt;p&gt;
      &amp;#x2014; Making Telecommuting Fun Again!
      &lt;/p&gt;
      
      &lt;p&gt;
      Advancing Accessibility In The Age Of User-Aware Interfaces
      &amp;#x2014; Zero
      cost of Ownership makes priceless software Universally affordable!
      &lt;/p&gt;
      
      &lt;p&gt;
      Emacspeak Inc (NASDOG: ESPK) &amp;#x2014; &lt;a
      
      href=&quot;http://github.com/tvraman/emacspeak&quot;&gt;http://github.com/tvraman/emacspeak&lt;/a&gt;
      &amp;#x2014; announces the immediate world-wide availability of
      &lt;a
      
      href=&quot;https://github.com/tvraman/emacspeak/releases/download/53.0/emacspeak-53.0.tar.bz2&quot;&gt;Emacspeak 53.0&lt;/a&gt;
      (EfficientDog) 🦮  &amp;#x2014; a powerful audio desktop that
      leverages today&#39;s evolving
      Data, Social and Assistant-Oriented Internet cloud   to enable
      working
      efficiently and effectively from anywhere!
      &lt;/p&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      
      &lt;div id=&quot;outline-container-org7bead7a&quot;
      class=&quot;outline-2&quot;&gt;
      &lt;h2 id=&quot;org7bead7a&quot;&gt;&lt;span
      class=&quot;section-number-2&quot;&gt;2&lt;/span&gt; Investors
      Note:&lt;/h2&gt;
      &lt;div class=&quot;outline-text-2&quot; id=&quot;text-2&quot;&gt;
      &lt;p&gt;
      With several prominent tweeters expanding coverage of &lt;span
      class=&quot;underline&quot;&gt;#emacspeak&lt;/span&gt;,
      NASDOG: ESPK has now been consistently trading over the social net
      atlevels close to that once attained by DogCom high-fliers—and as
      of
      Nov  2020 is trading at levels close to that achieved by once
      better known stocks in the tech sector.
      &lt;/p&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      
      &lt;div id=&quot;outline-container-orgc0b8c05&quot;
      class=&quot;outline-2&quot;&gt;
      &lt;h2 id=&quot;orgc0b8c05&quot;&gt;&lt;span
      class=&quot;section-number-2&quot;&gt;3&lt;/span&gt; What Is
      It?&lt;/h2&gt;
      &lt;div class=&quot;outline-text-2&quot; id=&quot;text-3&quot;&gt;
      &lt;p&gt;
      Emacspeak is a fully functional audio desktop that provides complete
      eyes-free access to all major 32 and 64 bit operating environments.
      By
      seamlessly blending live access to all aspects of the Internet such
      as
      ubiquitous assistance, Web-surfing, blogging, remote software
      development, social computing and electronic messaging into the
      audiodesktop, Emacspeak enables speech access to local and remote
      information with a consistent and well-integrated user interface. A
      rich suite of task-oriented tools provides efficient speech-enabled
      access to the evolving assistant-oriented social Internet cloud.
      &lt;/p&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      
      &lt;div id=&quot;outline-container-orga0f706e&quot;
      class=&quot;outline-2&quot;&gt;
      &lt;h2 id=&quot;orga0f706e&quot;&gt;&lt;span
      class=&quot;section-number-2&quot;&gt;4&lt;/span&gt; Major
      Enhancements:&lt;/h2&gt;
      &lt;div class=&quot;outline-text-2&quot; id=&quot;text-4&quot;&gt;
      &lt;p&gt;
      This version &lt;b&gt;requires&lt;/b&gt; emacs-26.1 or later. 
      &lt;/p&gt;
      
      
      &lt;ol class=&quot;org-ol&quot;&gt;
      &lt;li&gt;Speech-Enabled Haskell Mode ⁡&lt;/li&gt;
      &lt;li&gt;Speech-Enable VTerm  🖳&lt;/li&gt;
      &lt;li&gt;Speech-Enable Package Syslog  &lt;/li&gt;
      &lt;li&gt;Speech-enable Package hide-lines  𐇪&lt;/li&gt;
      &lt;li&gt;Speech-Enable Racer 🖹&lt;/li&gt;
      &lt;li&gt;Speech-Enable Eglot 󠀁&lt;/li&gt;
      &lt;li&gt;speech-Enable project.el 📽&lt;/li&gt;
      &lt;li&gt;Speech-Enable rust-mode 🦊&lt;/li&gt;
      &lt;li&gt;Emacspeak-sdcv &amp;#x2014; speech-Enable Stardict
      Interaction 🤩&lt;/li&gt;
      &lt;li&gt;Add CTL-Z As A New Prefix Keymap ⌨&lt;/li&gt;
      &lt;/ol&gt;
      
      &lt;p&gt;
      — And a lot more than will fit this margin. … 🗞
      &lt;/p&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      
      &lt;div id=&quot;outline-container-orgd40f131&quot;
      class=&quot;outline-2&quot;&gt;
      &lt;h2 id=&quot;orgd40f131&quot;&gt;&lt;span
      class=&quot;section-number-2&quot;&gt;5&lt;/span&gt; Establishing
      Liberty, Equality And Freedom:&lt;/h2&gt;
      &lt;div class=&quot;outline-text-2&quot; id=&quot;text-5&quot;&gt;
      &lt;p&gt;
      Never a toy system, Emacspeak is voluntarily bundled with all
      major Linux distributions. Though designed to be modular,
      distributors have freely chosen to bundle the fully integrated
      system without any undue pressure—a documented success for
      the integrated innovation embodied by Emacspeak. As the system
      evolves, both upgrades and downgrades continue to be available at
      the same zero-cost to all users. The integrity of the Emacspeak
      codebase is ensured by the reliable and secure Linux platform
      and the underlying GIT versioning software used to develop and
      distribute the system.
      &lt;/p&gt;
      
      &lt;p&gt;
      Extensive studies have shown that thanks to these features, users
      consider Emacspeak to be absolutely priceless. Thanks to this
      wide-spread user demand, the present version remains   priceless
      as ever—it is being made available at the same zero-cost as
      previous releases.
      &lt;/p&gt;
      
      &lt;p&gt;
      At the same time, Emacspeak continues to innovate in the area of
      eyes-free Assistance and social interaction and carries forward the
      well-established Open Source tradition of introducing user interface
      features that eventually show up in luser environments.
      &lt;/p&gt;
      
      &lt;p&gt;
      On this theme, when once challenged by a proponent of a crash-prone
      but well-marketed mousetrap with the assertion &quot;Emacs is a
      system from
      the 70&#39;s&quot;, the creator of Emacspeak evinced surprise at the
      unusual
      candor manifest in the assertion that it would take popular
      idiot-proven interfaces until the year 2070 to catch up to where the
      Emacspeak audio desktop is today. Industry experts welcomed this
      refreshing breath of Courage Certainty and Clarity (CCC) at a time
      when users are reeling from the Fear Uncertainty and Doubt (FUD)
      unleashed by complex software systems backed by even more convoluted
      press releases.
      &lt;/p&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      
      &lt;div id=&quot;outline-container-org839f959&quot;
      class=&quot;outline-2&quot;&gt;
      &lt;h2 id=&quot;org839f959&quot;&gt;&lt;span
      class=&quot;section-number-2&quot;&gt;6&lt;/span&gt; Independent
      Test Results:&lt;/h2&gt;
      &lt;div class=&quot;outline-text-2&quot; id=&quot;text-6&quot;&gt;
      &lt;p&gt;
      Independent test results have proven that unlike some modern (and
      not so modern) software, Emacspeak can be safely uninstalled without
      adversely affecting the continued performance of the computer. These
      same tests also revealed that once uninstalled, the user stopped
      functioning altogether. Speaking with Aster Labrador, the creator of
      Emacspeak once pointed out that these results re-emphasize the
      user-centric design of Emacspeak; “It is the user &amp;#x2014; and
      not the
      computer&amp;#x2013; that stops functioning when Emacspeak is
      uninstalled!”.
      &lt;/p&gt;
      &lt;/div&gt;
      
      &lt;div id=&quot;outline-container-org9adfe87&quot;
      class=&quot;outline-3&quot;&gt;
      &lt;h3 id=&quot;org9adfe87&quot;&gt;&lt;span
      class=&quot;section-number-3&quot;&gt;6.1&lt;/span&gt; Note from
      Aster,Bubbles and Tilden:&lt;/h3&gt;
      &lt;div class=&quot;outline-text-3&quot; id=&quot;text-6-1&quot;&gt;
      &lt;p&gt;
      UnDoctored Videos Inc. is looking for volunteers to star in a
      video demonstrating such complete user failure.
      &lt;/p&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      
      &lt;div id=&quot;outline-container-org84ee605&quot;
      class=&quot;outline-2&quot;&gt;
      &lt;h2 id=&quot;org84ee605&quot;&gt;&lt;span
      class=&quot;section-number-2&quot;&gt;7&lt;/span&gt; Obtaining
      Emacspeak:&lt;/h2&gt;
      &lt;div class=&quot;outline-text-2&quot; id=&quot;text-7&quot;&gt;
      &lt;p&gt;
      Emacspeak can be downloaded from GitHub &amp;#x2014; see
      &lt;a
      
      href=&quot;https://github.com/tvraman/emacspeak&quot;&gt;https://github.com/tvraman/emacspeak&lt;/a&gt; you can visit Emacspeak on the
      WWW at &lt;a
      
      href=&quot;http://emacspeak.sf.net&quot;&gt;http://emacspeak.sf.net&lt;/a&gt;. You can subscribe to the emacspeak
      mailing list — emacspeak@cs.vassar.edu — by sending mail to the
      list request address emacspeak-request@cs.vassar.edu. The &lt;a
      href=&quot;http://emacspeak.blogspot.com&quot;&gt;Emacspeak
      Blog&lt;/a&gt; is a good source for news about recent enhancements
      and how to
      use them.
      &lt;/p&gt;
      
      &lt;p&gt;
      The latest development snapshot of Emacspeak is always available at
      &lt;a
      
      href=&quot;https://github.com/tvraman/emacspeak&quot;&gt;GitHub&lt;/a&gt;.
      &lt;/p&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      
      &lt;div id=&quot;outline-container-org070e659&quot;
      class=&quot;outline-2&quot;&gt;
      &lt;h2 id=&quot;org070e659&quot;&gt;&lt;span
      class=&quot;section-number-2&quot;&gt;8&lt;/span&gt;
      History:&lt;/h2&gt;
      &lt;div class=&quot;outline-text-2&quot; id=&quot;text-8&quot;&gt;
      &lt;ul class=&quot;org-ul&quot;&gt;
      &lt;li&gt;Emacspeak 53.0 (EfficientDog)  focuses on 
      efficiency.&lt;/li&gt;
      &lt;li&gt;Emacspeak 52.0 (WorkAtHomeDog) makes working remotely a
      pleasurable experience.&lt;/li&gt;
      &lt;li&gt;Bigger and more powerful than any smart assistAnt,
      AssistDog provides&lt;/li&gt;
      &lt;/ul&gt;
      &lt;p&gt;
      instant access to the most relevant information at all times.
      &lt;/p&gt;
      &lt;ul class=&quot;org-ul&quot;&gt;
      &lt;li&gt;Emacspeak 50.0 (SageDog) embraces the wisdom of stability
      as
      opposed to rapid change and the concomitant  creation of bugs.🚭: 
      Naturally Intelligent (NI)™ at how information is spoken,
      Emacspeak&lt;/li&gt;
      &lt;/ul&gt;
      &lt;p&gt;
      is entirely free of Artificial Ingredients (AI)™.
      &lt;/p&gt;
      &lt;ul class=&quot;org-ul&quot;&gt;
      &lt;li&gt;Emacspeak 49.0 (WiseDog) leverages the wisdom gleaned from
      earlier releases to provide an enhanced  auditory
      experience.&lt;/li&gt;
      &lt;li&gt;Emacspeak 48.0  (ServiceDog) builds on earlier releases to
      provide
      continued end-user value.&lt;/li&gt;
      &lt;li&gt;Emacspeak 47.0 (GentleDog) goes the next step in being
      helpful
      while letting users learn and grow.&lt;/li&gt;
      &lt;li&gt;Emacspeak 46.0 (HelpfulDog) heralds the  coming of Smart
      Assistants.&lt;/li&gt;
      &lt;li&gt;Emacspeak 45.0 (IdealDog) is named in recognition of
      Emacs&#39;
      excellent integration with various programming language
      environments &amp;#x2014; thanks to this, Emacspeak is the IDE of
      choice
      for eyes-free software engineering.&lt;/li&gt;
      &lt;li&gt;Emacspeak 44.0 continues the steady pace of innovation on
      the
      audio desktop.&lt;/li&gt;
      &lt;li&gt;Emacspeak  43.0 brings even more end-user efficiency by
      leveraging the
      ability to spatially place multiple audio streams to provide timely
      auditory feedback.&lt;/li&gt;
      &lt;li&gt;Emacspeak 42.0 while moving to GitHub from Google Code
      continues to
      innovate in the areas of auditory user interfaces and efficient,
      light-weight Internet access.&lt;/li&gt;
      &lt;li&gt;Emacspeak 41.0 continues to improve 
      on  the desire to provide not just equal, but superior access —
      technology when correctly implemented can significantly enhance the
      human ability.&lt;/li&gt;
      &lt;li&gt;Emacspeak 40.0 goes back to Web basics by enabling
      &lt;a
      
      href=&quot;http://emacspeak.blogspot.com/2013/11/reading-web-content-efficiently.html&quot;&gt;efficient access&lt;/a&gt; to large amounts of readable Web content.&lt;/li&gt;
      &lt;li&gt;Emacspeak 39.0 continues the Emacspeak tradition of
      increasing the breadth of
      user tasks that are covered without introducing unnecessary
      bloatware.&lt;/li&gt;
      &lt;li&gt;Emacspeak 38.0 is the latest in a series of award-winning
      releases from Emacspeak Inc.&lt;/li&gt;
      &lt;li&gt;Emacspeak 37.0 continues the tradition of
      delivering robust software as reflected by its code-name.&lt;/li&gt;
      &lt;li&gt;Emacspeak 36.0 enhances the audio desktop with many new
      tools including full
      EPub support — hence the name EPubDog.&lt;/li&gt;
      &lt;li&gt;Emacspeak 35.0 is all about
      teaching a new dog old tricks — and is aptly code-named HeadDog in
      on  of our new Press/Analyst contact. emacspeak-34.0 (AKA Bubbles)
      established a new beach-head with respect to rapid task completion
      inan eyes-free environment.&lt;/li&gt;
      &lt;li&gt;Emacspeak-33.0 AKA StarDog brings
      unparalleled cloud access to the audio desktop.&lt;/li&gt;
      &lt;li&gt;Emacspeak 32.0 AKA
      LuckyDog continues to innovate via open technologies for better
      access.&lt;/li&gt;
      &lt;li&gt;Emacspeak 31.0 AKA TweetDog — adds tweeting to the
      Emacspeak
      desktop.&lt;/li&gt;
      &lt;li&gt;Emacspeak 30.0 AKA SocialDog brings the Social Web to the
      audio desktop—you cant but be social if you speak!&lt;/li&gt;
      &lt;li&gt;Emacspeak 29.0—AKAAbleDog—is a testament to the
      resilliance and innovation
      embodied by Open Source software—it would not exist without the
      thriving Emacs community that continues to ensure that Emacs remains
      one of the premier user environments despite perhaps also being one
      of
      the oldest.&lt;/li&gt;
      &lt;li&gt;Emacspeak 28.0—AKA PuppyDog—exemplifies the rapid pace
      of
      development evinced by Open Source software.&lt;/li&gt;
      &lt;li&gt;Emacspeak 27.0—AKA
      FastDog—is the latest in a sequence of upgrades that make previous
      releases obsolete and downgrades unnecessary.&lt;/li&gt;
      &lt;li&gt;Emacspeak 26—AKA
      LeadDog—continues the tradition of introducing innovative access
      solutions that are unfettered by the constraints inherent in
      traditional adaptive technologies.&lt;/li&gt;
      &lt;li&gt;Emacspeak 25 —AKA ActiveDog
      —re-activates open, unfettered access to online
      information.&lt;/li&gt;
      &lt;li&gt;Emacspeak-Alive —AKA LiveDog —enlivens open,
      unfetteredinformation access with a series of live updates that once
      again
      demonstrate the power and agility of open source software
      development.&lt;/li&gt;
      &lt;li&gt;Emacspeak 23.0 &amp;#x2014; AKA Retriever—went the extra
      mile in
      fetching full access.&lt;/li&gt;
      &lt;li&gt;Emacspeak 22.0 —AKA GuideDog —helps users
      navigate the Web more effectively than ever before.&lt;/li&gt;
      &lt;li&gt;Emacspeak 21.0
      —AKA PlayDog —continued the 
      Emacspeak tradition of relying on enhanced
      productivity to liberate users.&lt;/li&gt;
      &lt;li&gt;Emacspeak-20.0 —AKA LeapDog —continues
      the long established GNU/Emacs tradition of integrated innovation to
      create a pleasurable computing environment for eyes-free
      interaction.&lt;/li&gt;
      &lt;li&gt;emacspeak-19.0 &amp;#x2013;AKA WorkDog&amp;#x2013; is
      designed to enhance
      user productivity at work and leisure.&lt;/li&gt;
      &lt;li&gt;Emacspeak-18.0 &amp;#x2013;code named
      GoodDog&amp;#x2013; continued the Emacspeak tradition of enhancing
      user
      productivity and thereby reducing total cost of
      ownership.&lt;/li&gt;
      &lt;li&gt;Emacspeak-17.0 &amp;#x2013;code named HappyDog&amp;#x2013;
      enhances user
      productivity by exploiting today&#39;s evolving WWW
      standards.&lt;/li&gt;
      &lt;li&gt;Emacspeak-16.0 &amp;#x2013;code named
      CleverDog&amp;#x2013; the follow-up to
      SmartDog&amp;#x2013; continued the tradition of working better,
      faster,
      smarter.&lt;/li&gt;
      &lt;li&gt;Emacspeak-15.0 &amp;#x2013;code named
      SmartDog&amp;#x2013;followed up on TopDog
      as the next in a continuing  series of award-winning audio desktop
      releases from  Emacspeak Inc.&lt;/li&gt;
      &lt;li&gt;Emacspeak-14.0 &amp;#x2013;code named
      TopDog&amp;#x2013;was&lt;/li&gt;
      &lt;/ul&gt;
      &lt;p&gt;
      the first release of this millennium. 
      &lt;/p&gt;
      &lt;ul class=&quot;org-ul&quot;&gt;
      &lt;li&gt;Emacspeak-13.0 &amp;#x2013;codenamed
      YellowLab&amp;#x2013; was the closing release of the
      20th. century.&lt;/li&gt;
      &lt;li&gt;Emacspeak-12.0 &amp;#x2013;code named
      GoldenDog&amp;#x2013; began
      leveraging the evolving semantic WWW to provide task-oriented speech
      access to Webformation.&lt;/li&gt;
      &lt;li&gt;Emacspeak-11.0 &amp;#x2013;code named Aster&amp;#x2013;
      went the
      final step in making Linux a zero-cost Internet access solution for
      blind and visually impaired users.&lt;/li&gt;
      &lt;li&gt;Emacspeak-10.0 &amp;#x2013;(AKA
      Emacspeak-2000) code named WonderDog&amp;#x2013; continued the
      tradition of
      award-winning software releases designed to make eyes-free computing
      a
      productive and pleasurable experience.&lt;/li&gt;
      &lt;li&gt;Emacspeak-9.0 &amp;#x2013;(AKA
      Emacspeak 99) code named BlackLab&amp;#x2013; continued to innovate
      in the areas
      of speech interaction and interactive accessibility.&lt;/li&gt;
      &lt;li&gt;Emacspeak-8.0 &amp;#x2013;(AKA Emacspeak-98++) code named
      BlackDog&amp;#x2013; was a major upgrade to
      the speech output extension to Emacs.&lt;/li&gt;
      &lt;li&gt;Emacspeak-95 (code named Illinois) was released as
      OpenSource on
      the Internet in May 1995 as the first complete speech interface
      to UNIX workstations. The subsequent release, Emacspeak-96 (code
      named Egypt) made available in May 1996 provided significant
      enhancements to the interface. Emacspeak-97 (Tennessee) went
      further in providing a true audio desktop. Emacspeak-98
      integrated Internetworking into all aspects of the audio desktop
      to provide the first fully interactive speech-enabled
      WebTop.&lt;/li&gt;
      &lt;/ul&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      
      &lt;div id=&quot;outline-container-org6e91043&quot;
      class=&quot;outline-2&quot;&gt;
      &lt;h2 id=&quot;org6e91043&quot;&gt;&lt;span
      class=&quot;section-number-2&quot;&gt;9&lt;/span&gt; About
      Emacspeak:&lt;/h2&gt;
      &lt;div class=&quot;outline-text-2&quot; id=&quot;text-9&quot;&gt;
      &lt;p&gt;
      Originally based at Cornell (NY) —
      &lt;a
      
      href=&quot;http://www.cs.cornell.edu/home/raman&quot;&gt;http://www.cs.cornell.edu/home/raman&lt;/a&gt; —home to Auditory User
      Interfaces (AUI) on the WWW,  Emacspeak is now maintained on GitHub
      —&lt;a
      
      href=&quot;https://github.com/tvraman/emacspeak&quot;&gt;https://github.com/tvraman/emacspeak&lt;/a&gt;. The system is mirrored
      world-wide by an international network of software archives and
      bundled voluntarily with all major Linux distributions. On Monday,
      April 12, 1999, Emacspeak became part of the &lt;a
      
      href=&quot;http://tvraman.github.io/emacspeak/blog/smithsonian-study.html&quot;&gt;Smithsonian&#39;s Permanent
      Research Collection&lt;/a&gt; on Information Technology at the
      Smithsonian&#39;s
      National Museum of American History.
      &lt;/p&gt;
      
      &lt;p&gt;
      The Emacspeak mailing list is archived at Vassar &amp;#x2013;the
      home of the
      Emacspeak mailing list&amp;#x2013; thanks to Greg Priest-Dorman, and
      provides a
      valuable knowledge base for new users. Note that we are currently
      looking for a new home for the mailing list &amp;#x2014; stay tuned;
      in the
      meantime, the list is available via
      &lt;b&gt;nntp+news.gmane.io:gmane.emacs.emacspeak.general&lt;/b&gt;
      from within Gnus.
      &lt;/p&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      
      &lt;div id=&quot;outline-container-org7179250&quot;
      class=&quot;outline-2&quot;&gt;
      &lt;h2 id=&quot;org7179250&quot;&gt;&lt;span
      class=&quot;section-number-2&quot;&gt;10&lt;/span&gt; Press/Analyst
      Contact: Tilden Labrador&lt;/h2&gt;
      &lt;div class=&quot;outline-text-2&quot; id=&quot;text-10&quot;&gt;
      &lt;p&gt;
      Going forward, Tilden acknowledges his exclusive monopoly on
      setting the direction of the Emacspeak Audio Desktop (🦮) and
      promises to exercise this freedom to innovate and her resulting
      power responsibly (as before) in the interest of all dogs.
      &lt;/p&gt;
      
      &lt;p&gt;
      *About This Release:
      &lt;/p&gt;
      &lt;hr /&gt;
      
      &lt;p&gt;
      Windows-Free (WF) is a favorite battle-cry of The League Against
      Forced Fenestration (LAFF).  &amp;#x2013;see
      &lt;a
      
      href=&quot;http://www.usdoj.gov/atr/cases/f3800/msjudgex.htm&quot;&gt;http://www.usdoj.gov/atr/cases/f3800/msjudgex.htm&lt;/a&gt; for details on
      the ill-effects of Forced Fenestration.
      &lt;/p&gt;
      
      &lt;p&gt;
      CopyWrite )C( Aster, Hubbell and Tilden Labrador. All Writes
      Reserved.
      HeadDog (DM), LiveDog (DM), GoldenDog (DM), BlackDog (DM) etc., are
      Registered
      Dogmarks of Aster,  Hubbell  and Tilden Labrador.  All other dogs
      belong to
      their respective owners.
      &lt;/p&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;	
    </content>
    <link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/20280042/posts/default/4870921173520661381'/>
    <link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/20280042/posts/default/4870921173520661381'/>
    <link rel='alternate' type='text/html' href='https://emacspeak.blogspot.com/2020/11/emacspeak-530-efficientdog-unleashed.html' title='Emacspeak 53.0 EfficientDog Unleashed!'/>
    <author>
      <name>T. V. Raman</name><uri>
        http://www.blogger.com/profile/03589687652590194428
      </uri>
      <email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='https://img1.blogblog.com/img/b16-rounded.gif'/>
    </author>
  </entry>
  <entry>
    <id>tag:blogger.com,1999:blog-20280042.post-1034175706000724531</id><published>
      2020-11-02T10:54:00.001-08:00
    </published>
    <updated>2020-11-02T10:54:26.262-08:00</updated><title type='text'>
      Web: Data Tables Can Be More Than Screen-Deep
    </title>
    <content type='html'>&lt;div id=&quot;content&quot;&gt;
      &lt;h1 class=&quot;title&quot;&gt;Web: Data Tables Can Be More Than
      Screen-Deep&lt;/h1&gt;
      &lt;div id=&quot;outline-container-org64a9abd&quot;
      class=&quot;outline-2&quot;&gt;
      &lt;h2 id=&quot;org64a9abd&quot;&gt;&lt;span
      class=&quot;section-number-2&quot;&gt;1&lt;/span&gt; Executive
      Summary&lt;/h2&gt;
      &lt;div class=&quot;outline-text-2&quot; id=&quot;text-1&quot;&gt;
      &lt;p&gt;
      A few years ago, layout tables made speaking Web content difficult;
      that phase has now morphed into an even more horrifying soup of
      &lt;code&gt;div&lt;/code&gt;
      and &lt;code&gt;span&lt;/code&gt; tags styled by CSS. This also
      means that now, if you
      encounter a &lt;code&gt;table&lt;/code&gt; element, it likely
      contains some useful data;
      also, deeply nested tables are beginning to feel like a thing of the
      past.
      &lt;/p&gt;
      
      &lt;p&gt;
      Sadly, this has not made getting data out of HTML tables any easier.
      A
      combination of badly created markup, many redundant DOM nodes that
      exist purely for enabling DOM scripting, and heavy-weight DOM
      structures that   result from  code-generation have mostly created
      a different, but equally appalling situation .
      &lt;/p&gt;
      
      &lt;p&gt;
      One of the primary reasons to do everything in a rich end-user
      environment like Emacs is the ability to share data across tasks and
      being able to manipulate data as &lt;i&gt;data&lt;/i&gt;, rather
      than working with that
      data&#39;s underlying visual representation. Emacs can now render
      Webdocuments that are content focused, so the next immediate desire
      is to
      be able to extract data in a useful form from EWW rendered pages.
      This
      article describes one simple approach that lets me turn HTML tables
      found in the wild into a coherent tabular data structure  that I can
      access meaningfully via emacspeak to obtain multiple &lt;i&gt;spoken
      views&lt;/i&gt; of
      the data.
      &lt;/p&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      
      &lt;div id=&quot;outline-container-orgdcbe2b4&quot;
      class=&quot;outline-2&quot;&gt;
      &lt;h2 id=&quot;orgdcbe2b4&quot;&gt;&lt;span
      class=&quot;section-number-2&quot;&gt;2&lt;/span&gt; Initial
      Approach That Failed&lt;/h2&gt;
      &lt;div class=&quot;outline-text-2&quot; id=&quot;text-2&quot;&gt;
      &lt;p&gt;
      I first tried to see if I could make EWW annotate the rendered
      &lt;i&gt;table
      data&lt;/i&gt; with text properties &amp;#x2014; sadly that proved
      impossible to do in
      the current implementation. Note however that Emacspeak does use
      textproperties to provide access to other aspects of HTML document
      structure such as section headers, and moving through the rendered
      tables in an EWW buffer.
      &lt;/p&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      
      &lt;div id=&quot;outline-container-org5e26cc4&quot;
      class=&quot;outline-2&quot;&gt;
      &lt;h2 id=&quot;org5e26cc4&quot;&gt;&lt;span
      class=&quot;section-number-2&quot;&gt;3&lt;/span&gt; Ensuring That
      EWW Rendered Tables Are More than Screen-Deep&lt;/h2&gt;
      &lt;div class=&quot;outline-text-2&quot; id=&quot;text-3&quot;&gt;
      &lt;p&gt;
      I implemented the approach described below a couple of weeks ago and
      it appears to work well barring a few known limitations.
      &lt;/p&gt;
      
      &lt;ol class=&quot;org-ol&quot;&gt;
      &lt;li&gt;I  &lt;a href=&quot;#orgf4ac815&quot;&gt;advice&lt;/a&gt;
      EWW to store a pointer to the &lt;i&gt;Table DOM&lt;/i&gt; in the
      EWW buffer.&lt;/li&gt;
      &lt;li&gt;I defined a &lt;a
      href=&quot;#org5da504b&quot;&gt;function&lt;/a&gt; that converts the
      DOM nodes from the
      &lt;i&gt;table-dom&lt;/i&gt; into a two-dimensional
      vector.&lt;/li&gt;
      &lt;li&gt;I then &lt;a
      href=&quot;#org1814a73&quot;&gt;pass&lt;/a&gt; this structure to
      Emacspeak&#39;s &lt;i&gt;Table-UI&lt;/i&gt; module to
      obtain a browsable two-dimensional structure.&lt;/li&gt;
      &lt;li&gt;Module &lt;a
      href=&quot;#org67024ea&quot;&gt;emacspeak-table-ui&lt;/a&gt; enables
      the user to obtain multiple
      &lt;i&gt;spoken views&lt;/i&gt;  of the  tabular data.&lt;/li&gt;
      &lt;/ol&gt;
      
      &lt;p&gt;
      See the following sections for details on each of these steps.
      &lt;/p&gt;
      &lt;/div&gt;
      
      &lt;div id=&quot;outline-container-orgfcef362&quot;
      class=&quot;outline-3&quot;&gt;
      &lt;h3 id=&quot;orgfcef362&quot;&gt;&lt;span
      class=&quot;section-number-3&quot;&gt;3.1&lt;/span&gt; Storing A
      Pointer To The Table-DOM &lt;a
      id=&quot;orgf4ac815&quot;&gt;&lt;/a&gt;&lt;/h3&gt;
      &lt;div class=&quot;outline-text-3&quot; id=&quot;text-3-1&quot;&gt;
      &lt;div class=&quot;org-src-container&quot;&gt;
      &lt;pre class=&quot;src src-emacs-lisp&quot;&gt;(&lt;span
      style=&quot;color: #b6a0ff;&quot;&gt;defadvice&lt;/span&gt; &lt;span
      style=&quot;color: #feacd0;&quot;&gt;shr-tag-table-1&lt;/span&gt;
      (around emacspeak pre act comp) 
      &lt;span style=&quot;color: #c6eaff;&quot;&gt;&quot;Cache pointer to
      table dom as a text property&quot;&lt;/span&gt;
      (&lt;span style=&quot;color: #b6a0ff;&quot;&gt;let&lt;/span&gt;
      ((table-dom (ad-get-arg 0))
      (start (point)))
      ad-do-it
      (&lt;span style=&quot;color: #b6a0ff;&quot;&gt;unless&lt;/span&gt;
      (get-text-property start &#39;table-dom)
      (put-text-property start (point)
      &#39;table-dom table-dom))
      ad-return-value))
      &lt;/pre&gt;
      &lt;/div&gt;
      
      &lt;p&gt;
      This advice stores a pointer to the &lt;i&gt;DOM&lt;/i&gt; of the
      table being rendered
      over the region  containing the rendering.
      &lt;/p&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      
      &lt;div id=&quot;outline-container-orgf92b80e&quot;
      class=&quot;outline-3&quot;&gt;
      &lt;h3 id=&quot;orgf92b80e&quot;&gt;&lt;span
      class=&quot;section-number-3&quot;&gt;3.2&lt;/span&gt; Generate A
      Tabular Structure From The Dom &lt;a
      id=&quot;org5da504b&quot;&gt;&lt;/a&gt;&lt;/h3&gt;
      &lt;div class=&quot;outline-text-3&quot; id=&quot;text-3-2&quot;&gt;
      &lt;p&gt;
      Function &lt;code&gt;emacspeak-eww-table-table&lt;/code&gt;
      generates a two-dimensional
      vector that encaspulates the tabular data.
      &lt;/p&gt;
      
      &lt;div class=&quot;org-src-container&quot;&gt;
      &lt;pre class=&quot;src src-emacs-lisp&quot;&gt;(&lt;span
      style=&quot;color: #b6a0ff;&quot;&gt;defun&lt;/span&gt; &lt;span
      style=&quot;color:
      #feacd0;&quot;&gt;emacspeak-eww-table-table&lt;/span&gt; ()
      &lt;span style=&quot;color: #c6eaff;&quot;&gt;&quot;Return table
      cells as a table, a 2d structure.&quot;&lt;/span&gt;
      (&lt;span style=&quot;color: #b6a0ff;&quot;&gt;let*&lt;/span&gt;
      ((data nil)
      (table (get-text-property (point) &#39;table-dom))
      (head (dom-by-tag table &#39;th)))
      (&lt;span style=&quot;color:
      #dbbe5f;&quot;&gt;cl-assert&lt;/span&gt; table t &lt;span
      style=&quot;color: #79a8ff;&quot;&gt;&quot;No table
      here.&quot;&lt;/span&gt;)
      (&lt;span style=&quot;color: #b6a0ff;&quot;&gt;setq&lt;/span&gt;
      data          (&lt;span style=&quot;color:
      #b6a0ff;&quot;&gt;cl-loop&lt;/span&gt;
      for r in (dom-by-tag table &#39;tr) collect
      (&lt;span style=&quot;color: #b6a0ff;&quot;&gt;cl-loop&lt;/span&gt;
      for c in
      (append
      (dom-by-tag r &#39;th)
      (dom-by-tag r &#39;td))
      collect
      (string-trim (dom-node-as-text c)))))
      &lt;span style=&quot;color: #a8a8a8;&quot;&gt;;;;
      &lt;/span&gt;&lt;span style=&quot;color: #a8a8a8;&quot;&gt;handle
      head case differently:&lt;/span&gt;
      (&lt;span style=&quot;color: #b6a0ff;&quot;&gt;if&lt;/span&gt; head
      (apply #&#39;vector (mapcar #&#39;vconcat  (cdr data)))
      (apply #&#39;vector (mapcar #&#39;vconcat  data)))))
      &lt;/pre&gt;
      &lt;/div&gt;
      
      
      &lt;p&gt;
      The above code handles the case where there are header (i.e.,
      &lt;span class=&quot;underline&quot;&gt;th&lt;/span&gt;)
      cells specially to avoid a bug where we get two copies of the data.
      The nested loops  generates a list of lists, and the final call
      turns this into a two-dimensional vector.
      &lt;/p&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      
      &lt;div id=&quot;outline-container-orgc296d95&quot;
      class=&quot;outline-3&quot;&gt;
      &lt;h3 id=&quot;orgc296d95&quot;&gt;&lt;span
      class=&quot;section-number-3&quot;&gt;3.3&lt;/span&gt; Browsing
      Tables As Data  &lt;a
      id=&quot;org1814a73&quot;&gt;&lt;/a&gt;&lt;/h3&gt;
      &lt;div class=&quot;outline-text-3&quot; id=&quot;text-3-3&quot;&gt;
      &lt;p&gt;
      Interactive command
      &lt;code&gt;emacspeak-eww-table-data&lt;/code&gt; (bound to &lt;span
      class=&quot;underline&quot;&gt;C-t&lt;/span&gt;) takes the
      &lt;i&gt;table&lt;/i&gt; at
      point, i.e. when point is anywhere within a table rendering, and
      creates a browsable table buffer as implemented by module 
      &lt;a
      
      href=&quot;https://github.com/tvraman/emacspeak/blob/master/lisp/emacspeak-table-ui.el#L483&quot;&gt;emacspeak-table-ui&lt;/a&gt;.
      &lt;/p&gt;
      
      &lt;div class=&quot;org-src-container&quot;&gt;
      &lt;pre class=&quot;src src-emacs-lisp&quot;&gt;(&lt;span
      style=&quot;color: #b6a0ff;&quot;&gt;defun&lt;/span&gt; &lt;span
      style=&quot;color:
      #feacd0;&quot;&gt;emacspeak-eww-table-data&lt;/span&gt; ()
      &lt;span style=&quot;color: #c6eaff;&quot;&gt;&quot;View  table at
      point as a data table using Emacspeak Table UI.&quot;&lt;/span&gt;
      (&lt;span style=&quot;color:
      #b6a0ff;&quot;&gt;interactive&lt;/span&gt;)
      (&lt;span style=&quot;color: #b6a0ff;&quot;&gt;let&lt;/span&gt;
      ((data (emacspeak-eww-table-table))
      (data-table nil)
      (inhibit-read-only  t)
      (buffer
      (get-buffer-create
      (format  &lt;span style=&quot;color: #79a8ff;&quot;&gt;&quot;Table:
      %s&quot;&lt;/span&gt; (emacspeak-eww-current-title)))))
      (&lt;span style=&quot;color: #b6a0ff;&quot;&gt;setq&lt;/span&gt;
      data-table (emacspeak-table-make-table data))
      (emacspeak-table-prepare-table-buffer data-table buffer)))
      &lt;/pre&gt;
      &lt;/div&gt;
      
      &lt;p&gt;
      The two-dimensional vector described earlier is now converted to a
      tabular structure as expected  by module
      &lt;code&gt;emacspeak-table-ui&lt;/code&gt;, the
      primary difference being that this structure explicitly captures row
      and column headers.
      &lt;/p&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      
      &lt;div id=&quot;outline-container-org42c5fab&quot;
      class=&quot;outline-3&quot;&gt;
      &lt;h3 id=&quot;org42c5fab&quot;&gt;&lt;span
      class=&quot;section-number-3&quot;&gt;3.4&lt;/span&gt; Browsing The
      Tabular Data &lt;a
      id=&quot;org67024ea&quot;&gt;&lt;/a&gt;&lt;/h3&gt;&lt;div
      class=&quot;outline-text-3&quot; id=&quot;text-3-4&quot;&gt;
      &lt;p&gt;
      Emacspeak&#39;s &lt;a
      
      href=&quot;https://tvraman.github.io/emacspeak/manual/emacspeak_002dtable.html#emacspeak_002dtable&quot;&gt;Table UI&lt;/a&gt; allows one to:
      &lt;/p&gt;
      
      &lt;ol class=&quot;org-ol&quot;&gt;
      &lt;li&gt;Move through table cells, either by row or
      column.&lt;/li&gt;
      &lt;li&gt;Determine what is spoken  during such
      navigation,&lt;/li&gt;
      &lt;li&gt;Spoken views can include cell value, row header and column
      header.&lt;/li&gt;
      &lt;li&gt;For more advanced use-cases, one can define a &lt;i&gt;row
      filter&lt;/i&gt; or
      &lt;i&gt;column filter&lt;/i&gt;, think of these as specialized
      &lt;i&gt;formatters&lt;/i&gt; that
      can format  selected cells and their headers into a
      natural-sounding sentence.&lt;/li&gt;
      &lt;/ol&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
    </content>
    <link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/20280042/posts/default/1034175706000724531'/>
    <link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/20280042/posts/default/1034175706000724531'/>
    <link rel='alternate' type='text/html' href='https://emacspeak.blogspot.com/2020/11/web-data-tables-can-be-more-than-screen.html' title='Web: Data Tables Can Be More Than Screen-Deep'/>
    <author>
      <name>T. V. Raman</name><uri>
        http://www.blogger.com/profile/03589687652590194428
      </uri>
      <email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='https://img1.blogblog.com/img/b16-rounded.gif'/>
    </author>
  </entry>
  <entry>
    <id>tag:blogger.com,1999:blog-20280042.post-2853057356022218696</id><published>
      2020-10-10T07:52:00.000-07:00
    </published>
    <updated>2020-10-10T07:52:23.442-07:00</updated><title type='text'>
      Extracted A Light-Weight Key-Reader By Progressive Simplification
    </title>
    <content type='html'>&lt;div id=&quot;content&quot;&gt;
      &lt;h1 class=&quot;title&quot;&gt;Extracting A Light-Weight
      Key-Sequence Reader By Progressive Simplification&lt;/h1&gt;
      &lt;div id=&quot;outline-container-orgac4008b&quot;
      class=&quot;outline-2&quot;&gt;
      &lt;h2 id=&quot;orgac4008b&quot;&gt;&lt;span
      class=&quot;section-number-2&quot;&gt;1&lt;/span&gt;
      Background&lt;/h2&gt;
      &lt;div class=&quot;outline-text-2&quot; id=&quot;text-1&quot;&gt;
      &lt;p&gt;
      In the previous article entitled &lt;a
      
      href=&quot;https://emacspeak.blogspot.com/2020/10/on-defining-keys-in-emacs.html&quot;&gt;On Defining Keys In Emacs&lt;/a&gt; I covered
      the issue of declaring key-sequences when defining keyboard
      short-cuts.  During the last week, I took the underlying Emacs Lisp
      function &lt;code&gt;edmacro-parse-key&lt;/code&gt; and via a
      process of progressive
      simplification derived a new &lt;code&gt;new-kbd&lt;/code&gt;
      function that is much simpler
      and consequently easier to understand.  You can see the step-by-step
      simplification via the Git history for file &lt;a
      
      href=&quot;https://github.com/tvraman/emacspeak/blob/master/lisp/new-kbd.el#L1&quot;&gt;new-kbd.el&lt;/a&gt; (note: used to
      be called &lt;code&gt;ems-kbd.el&lt;/code&gt;).  That file contains
      the final version of the
      simplified function, along with a test-suite that verifies that
      it&#39;s
      behavior is convenient with the solution built into Emacs. The
      updated
      function is now part of Emacspeak and is named
      &lt;code&gt;ems-kbd&lt;/code&gt; in that
      package.
      &lt;/p&gt;
      
      &lt;p&gt;
      The next section gives a high-level overview of the steps that led
      tothe final version.
      &lt;/p&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      
      &lt;div id=&quot;outline-container-orgc5fe474&quot;
      class=&quot;outline-2&quot;&gt;
      &lt;h2 id=&quot;orgc5fe474&quot;&gt;&lt;span
      class=&quot;section-number-2&quot;&gt;2&lt;/span&gt; Steps Toward
      Simplification&lt;/h2&gt;
      &lt;div class=&quot;outline-text-2&quot; id=&quot;text-2&quot;&gt;
      &lt;/div&gt;
      &lt;div id=&quot;outline-container-orgaaa6d11&quot;
      class=&quot;outline-3&quot;&gt;
      &lt;h3 id=&quot;orgaaa6d11&quot;&gt;&lt;span
      class=&quot;section-number-3&quot;&gt;2.1&lt;/span&gt; Separate
      Tokenization From Processing&lt;/h3&gt;
      &lt;div class=&quot;outline-text-3&quot; id=&quot;text-2-1&quot;&gt;
      &lt;p&gt;
      Function &lt;code&gt;edmacro-parse-keys&lt;/code&gt; 
      interweaves  the process of tokenizing its input string  and how
      various parts of that string are processed in a single
      &lt;code&gt;while&lt;/code&gt; loop.
      &lt;/p&gt;
      
      &lt;p&gt;
      The first  step in simplification was to separate these steps, by 
      using function &lt;code&gt;split-string&lt;/code&gt; to split the
      input string on
      &lt;span class=&quot;underline&quot;&gt;whitespace&lt;/span&gt; to
      generate a list of words.
      &lt;/p&gt;
      
      &lt;p&gt;
      A simple &lt;code&gt;cl-loop&lt;/code&gt; is then used to turn each
      &lt;code&gt;word&lt;/code&gt; into a &lt;code&gt;key&lt;/code&gt;
      that
      is accumulated into a result vector.
      &lt;/p&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      
      &lt;div id=&quot;outline-container-orge871f14&quot;
      class=&quot;outline-3&quot;&gt;
      &lt;h3 id=&quot;orge871f14&quot;&gt;&lt;span
      class=&quot;section-number-3&quot;&gt;2.2&lt;/span&gt; Refactoring
      Case Analysis&lt;/h3&gt;
      &lt;div class=&quot;outline-text-3&quot; id=&quot;text-2-2&quot;&gt;
      &lt;p&gt;
      Once tokenization is factored out, 
      the remainder of function
      &lt;code&gt;edmacro-parse-keys&lt;/code&gt; 
      converts each key-specification into either the corresponding string
      or vector representation.
      &lt;/p&gt;
      
      &lt;p&gt;
      The original requirement of parsing  the serialization of
      keyboard-macros brought along additional logic that I first
      eliminated, since my goal was to create a function to be used in
      defining keyboard-shortcuts.
      &lt;/p&gt;
      
      &lt;ul class=&quot;org-ul&quot;&gt;
      &lt;li&gt;I eliminated code that handled invocation of
      &lt;code&gt;M-x
      execute-extended-command&lt;/code&gt; during a
      keyboard-macro.&lt;/li&gt;
      &lt;li&gt;I eliminated processing of comments within the
      keyboard-macro serialization.&lt;/li&gt;
      &lt;/ul&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      
      &lt;div id=&quot;outline-container-org349e909&quot;
      class=&quot;outline-3&quot;&gt;
      &lt;h3 id=&quot;org349e909&quot;&gt;&lt;span
      class=&quot;section-number-3&quot;&gt;2.3&lt;/span&gt; Rearranging
      Conditionals&lt;/h3&gt;
      &lt;div class=&quot;outline-text-3&quot; id=&quot;text-2-3&quot;&gt;
      &lt;p&gt;
      Next, I rearranged conditionals and in that process eliminated
      &lt;code&gt;cond&lt;/code&gt;
      clauses that were now effectively dead-code.
      &lt;/p&gt;
      
      &lt;p&gt;
      In the process, I also eliminated   test-predicates that had
      side-effects  to hopefully result in less fragile code.
      &lt;/p&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      
      &lt;div id=&quot;outline-container-org7af7bb1&quot;
      class=&quot;outline-3&quot;&gt;
      &lt;h3 id=&quot;org7af7bb1&quot;&gt;&lt;span
      class=&quot;section-number-3&quot;&gt;2.4&lt;/span&gt; Lexically
      Bind Regex Patterns&lt;/h3&gt;
      &lt;div class=&quot;outline-text-3&quot; id=&quot;text-2-4&quot;&gt;
      &lt;p&gt;
      To improve readability, I created let-bindings to some of the regex
      patterns used to identify key-sequence patterns.
      In the process, I also made these more readable by using &lt;span
      class=&quot;underline&quot;&gt;[:space:]&lt;/span&gt;
      for white-space tests.
      &lt;/p&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      
      
      
      &lt;div id=&quot;outline-container-org139056e&quot;
      class=&quot;outline-3&quot;&gt;
      &lt;h3 id=&quot;org139056e&quot;&gt;&lt;span
      class=&quot;section-number-3&quot;&gt;2.5&lt;/span&gt; Always Return
      A Vector&lt;/h3&gt;
      &lt;div class=&quot;outline-text-3&quot; id=&quot;text-2-5&quot;&gt;
      &lt;p&gt;
      Finally, I setup the new function to always return a vector;
      function&lt;code&gt;edmacro-parse-keys&lt;/code&gt; returns either a
      string or a vector  based on how
      it is called. 
      Since Emacs now takes a vector in every context  where a
      key-sequenceis expected, this simplification does not break  when
      using our
      simplified function for  defining keys.
      &lt;/p&gt;
      
      &lt;div class=&quot;org-src-container&quot;&gt;
      &lt;pre class=&quot;src src-emacs-list&quot;&gt;   (defun new-kbd
      (string )
      &quot;Simplified and hopefully more robust kbd function.
      Always returns a vector i.e. like passing need-vector to
      edmacro-parse-keys. &quot;
      (let ((res [])
      (special-char-reg
      &quot;^\\(NUL\\|RET\\|LFD\\|ESC\\|SPC\\|DEL\\)$&quot;)
      (modifier+angle-reg
      &quot;^\\(\\([ACHMsS]-\\)*\\)&amp;lt;\\(.+\\)&amp;gt;$&quot;))
      (cl-loop
      for word in (split-string string)
      do
      (let* ((key nil))
      (cond 
      ((and ;;; modifier+-&amp;lt;key&amp;gt; without DEL etc
      (not (string-match special-char-reg word))
      (string-match modifier+angle-reg word))
      (setq key
      (list
      (intern 
      (concat ;;; strip &amp;lt; and &amp;gt;
      (substring word (match-beginning 1) (match-end 1))
      (substring word (match-beginning 3) (match-end 3)))))))
      (t
      (let ((prefix 0)
      (bits 0))
      (while ;;; calculate modifier bits
      (string-match &quot;^[ACHMsS]-.&quot; word)
      (cl-incf bits
      (cdr
      (assq (aref word 0)
      &#39;((?A . ?\A-\^@)
      (?C . ?\C-\^@)
      (?H . ?\H-\^@)
      (?M . ?\M-\^@)
      (?s . ?\s-\^@)
      (?S . ?\S-\^@)))))
      (cl-incf prefix 2)
      (cl-callf substring word 2))
      (when (string-match &quot;^\\^.$&quot; word)
      (cl-incf bits ?\C-\^@)
      (cl-incf prefix)
      (cl-callf substring word 1))
      (when-let
      (found
      (assoc word
      &#39;((&quot;NUL&quot; . &quot;\0&quot;)
      (&quot;RET&quot; . &quot;\r&quot;)
      (&quot;LFD&quot; . &quot;\n&quot;)
      (&quot;TAB&quot; . &quot;\t&quot;)
      (&quot;ESC&quot; . &quot;\e&quot;)
      (&quot;SPC&quot; . &quot; &quot;)
      (&quot;DEL&quot; . &quot;\177&quot;))))
      (setq word (cdr found)))
      (cond ;;; apply modifiers 
      ((= bits 0) (setq key word))
      ((/= (length word) 1)
      (error &quot;%s: Prefix  must precede a single character, not
      %s&quot;
      string word))
      ((and
      (/= (logand bits ?\C-\^@) 0)
      (string-match &quot;[@-_a-z]&quot; word))
      (setq key
      (list (+ bits (- ?\C-\^@)
      (logand (aref word 0) 31)))))
      (t (setq key (list (+ bits (aref word 0)))))))))
      ;;; push key on to the result vector 
      (when key (cl-callf vconcat res key))))
      res))
      &lt;/pre&gt;
      &lt;/div&gt;
      
      
      &lt;p&gt;
      You can verify the code above by running the tests found at the end
      of
      file  &lt;code&gt;new-kbd.el&lt;/code&gt; &amp;#x2014; the tests
      were extracted from the various
      patterns described in the Elisp Reference, as well as  by reading
      thecode in &lt;code&gt;edmacro-parse-keys&lt;/code&gt;.
      &lt;/p&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      
      
      &lt;div id=&quot;outline-container-org0923351&quot;
      class=&quot;outline-3&quot;&gt;
      &lt;h3 id=&quot;org0923351&quot;&gt;&lt;span
      class=&quot;section-number-3&quot;&gt;2.6&lt;/span&gt; Closing
      Thoughts&lt;/h3&gt;
      &lt;div class=&quot;outline-text-3&quot; id=&quot;text-2-6&quot;&gt;
      &lt;p&gt;
      The above simplification exercise was done by:
      &lt;/p&gt;
      
      &lt;ol class=&quot;org-ol&quot;&gt;
      &lt;li&gt;Starting with the original
      &lt;code&gt;edmacro-parse-keys&lt;/code&gt; copied over to a
      new file and renamed to function
      &lt;code&gt;new-kbd&lt;/code&gt;.&lt;/li&gt;
      &lt;li&gt;Adding a set of tests at the end of file, essentially this
      is a
      &lt;code&gt;let&lt;/code&gt; that binds a set of tests, then
      compares the result of
      calling our new function on each value with that returned by the
      original.&lt;/li&gt;
      &lt;li&gt;Modifying and simplifying our new function and running
      &lt;code&gt;eval-buffer&lt;/code&gt; after each step.&lt;/li&gt;
      &lt;li&gt;It was a fun exercise to see order emerge from chaos at
      each step!&lt;/li&gt;
      &lt;/ol&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
    </content>
    <link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/20280042/posts/default/2853057356022218696'/>
    <link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/20280042/posts/default/2853057356022218696'/>
    <link rel='alternate' type='text/html' href='https://emacspeak.blogspot.com/2020/10/extracted-light-weight-key-reader-by.html' title='Extracted A Light-Weight Key-Reader By Progressive Simplification'/>
    <author>
      <name>T. V. Raman</name><uri>
        http://www.blogger.com/profile/03589687652590194428
      </uri>
      <email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='16' height='16' src='https://img1.blogblog.com/img/b16-rounded.gif'/>
    </author>
  </entry>
</feed>
